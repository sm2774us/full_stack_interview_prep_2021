{"version":3,"sources":["webpack:///./src/types.ts","webpack:///./src/services/AuthService.ts","webpack:///./src/components/YesNoDialog.tsx","webpack:///./src/domain/Position.ts","webpack:///./src/CreateJob.tsx","webpack:///./src/Login.tsx","webpack:///./src/Logout.tsx","webpack:///./src/Register.tsx","webpack:///./src/ViewJob.tsx","webpack:///./src/ViewRating.tsx","webpack:///./src/ioc/ContainerOperations.ts","webpack:///./src/DriverRegistration.tsx","webpack:///./src/PassengerRegistration.tsx","webpack:///./src/components/AcceptList.tsx","webpack:///./src/components/RatingDialog.tsx","webpack:///./src/domain/JobEventArgs.ts","webpack:///./src/domain/PositionMarker.ts","webpack:///./src/index.tsx","webpack:///./src/services/JobService.ts","webpack:///./src/services/JobStreamService.ts","webpack:///./src/services/PositionService.ts","webpack:///./src/services/UUIDService.ts","webpack:///./src/components/OkDialog.tsx"],"names":[],"mappings":"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","file":"index.bundle.5c5feaa8663412cf31c5.js","sourcesContent":["export const TYPES = {\r\n    AuthService: Symbol(\"AuthService\"),\r\n    JobService: Symbol(\"JobService\"),\r\n    JobStreamService: Symbol(\"JobStreamService\"),\r\n    PositionService: Symbol(\"PositionService\")\r\n};\n\n\n// WEBPACK FOOTER //\n// ./src/types.ts","import { injectable, inject } from \"inversify\";\r\nimport { TYPES } from \"../types\";\r\nimport Rx from 'rx';\r\n\r\n@injectable()\r\nexport class AuthService {\r\n\r\n    private _isAuthenticated: boolean;\r\n    private _authenticatedSubject = new Rx.Subject<boolean>();\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    clearUser = (): void => {\r\n        this._isAuthenticated = false;\r\n        sessionStorage.removeItem('currentUserProfile');\r\n        this._authenticatedSubject.onNext(false);\r\n    }\r\n\r\n    storeUser = (currentProfile: any): void => {\r\n\r\n        if (currentProfile == null || currentProfile == undefined)\r\n            return;\r\n\r\n        this._isAuthenticated = true;\r\n        sessionStorage.setItem('currentUserProfile', JSON.stringify(currentProfile));\r\n        this._authenticatedSubject.onNext(true);\r\n    }\r\n\r\n    userName = (): string => {\r\n        var userProfile = JSON.parse(sessionStorage.getItem('currentUserProfile'));\r\n        return userProfile.user.fullName;\r\n    }\r\n\r\n    user = (): any => {\r\n        var userProfile = JSON.parse(sessionStorage.getItem('currentUserProfile'));\r\n        return userProfile.user;\r\n    }\r\n\r\n    userEmail = (): string => {\r\n        var userProfile = JSON.parse(sessionStorage.getItem('currentUserProfile'));\r\n        return userProfile.user.email;\r\n    }\r\n\r\n    isDriver = (): boolean => {\r\n        var userProfile = JSON.parse(sessionStorage.getItem('currentUserProfile'));\r\n        return userProfile.isDriver;\r\n    }\r\n\r\n    isAuthenticated = (): boolean => {\r\n        return this._isAuthenticated;\r\n    }\r\n\r\n    getAuthenticationStream = (): Rx.Observable<boolean> => {\r\n        return this._authenticatedSubject.asObservable();\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/services/AuthService.ts","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport * as _ from \"lodash\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport\r\n{\r\n    Button, \r\n    Modal\r\n} from \"react-bootstrap\";\r\n\r\n\r\nexport interface YesNoDialogProps {\r\n    headerText: string;\r\n    theId: string;\r\n    actionPerformed: boolean;\r\n    launchButtonText: string;\r\n    yesCallBack(): void;\r\n    noCallBack(): void;\r\n}\r\n\r\nexport interface YesNoDialogState {\r\n    showModal: boolean;\r\n}\r\n\r\nconst GetButtonCss = (actionPerformed: boolean): string => {\r\n\r\n    if (!actionPerformed) {\r\n        return \"displayBlock\";\r\n    }\r\n    else {\r\n        return \"displayNone\";\r\n    }\r\n}\r\n\r\nexport class YesNoDialog extends React.Component<YesNoDialogProps, YesNoDialogState> {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(this.props);\r\n        //set initial state\r\n        this.state = {\r\n            showModal: false\r\n        };\r\n    }\r\n\r\n    yesClicked = () => {\r\n        this.setState({ showModal: false });\r\n        this.props.yesCallBack();\r\n    }\r\n\r\n    noClicked = () => {\r\n        this.setState({ showModal: false });\r\n        this.props.noCallBack();\r\n    }\r\n\r\n    close = () => {\r\n        this.setState({ showModal: false });\r\n    }\r\n\r\n    open = () => {\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"leftFloat\">\r\n\r\n                <Button\r\n                    id={this.props.theId}\r\n                    type='button'\r\n                    bsSize='small'\r\n                    bsStyle='primary'\r\n                    className={GetButtonCss(this.props.actionPerformed)}\r\n                    onClick={this.open}>{this.props.launchButtonText}</Button>\r\n\r\n                <Modal show={this.state.showModal} onHide={this.close}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>{ this.props.headerText }</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <h4>Are you sure?</h4>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button\r\n                            type='button'\r\n                            bsSize='small'\r\n                            bsStyle='primary'\r\n                            onClick={this.yesClicked}>Yes</Button>\r\n                        <Button\r\n                            type='button'\r\n                            bsSize='small'\r\n                            bsStyle='danger'\r\n                            onClick={this.noClicked}>Cancel</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/YesNoDialog.tsx","export class Position {\r\n\r\n    //my JSON API prefers nice names\r\n    latitude: number;\r\n    longitude: number;\r\n\r\n    //map component wants these abbreviated names\r\n    lat: number;\r\n    lng: number;\r\n\r\n    constructor(latitude: number, longitude: number) {\r\n        this.latitude = latitude;\r\n        this.longitude = longitude;\r\n\r\n        //keep map happy\r\n        this.lat = latitude;\r\n        this.lng = longitude;\r\n    }\r\n\r\n\r\n    \r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/domain/Position.ts","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport * as _ from \"lodash\";\r\nimport Measure from 'react-measure'\r\nimport { OkDialog } from \"./components/OkDialog\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {\r\n    Well,\r\n    Grid,\r\n    Row,\r\n    Col,\r\n    ButtonInput,\r\n    ButtonGroup,\r\n    Button\r\n} from \"react-bootstrap\";\r\nimport { AuthService } from \"./services/AuthService\";\r\nimport { JobService } from \"./services/JobService\";\r\nimport { PositionService } from \"./services/PositionService\";\r\nimport { UUIDService } from \"./services/UUIDService\";\r\nimport { Position } from \"./domain/Position\";\r\nimport { hashHistory } from 'react-router';\r\nimport { withGoogleMap, GoogleMap, Marker, InfoBox, OverlayView } from \"react-google-maps\";\r\n\r\nconst STYLES = {\r\n    overlayView: {\r\n        background: `white`,\r\n        border: `1px solid #ccc`,\r\n        padding: 15,\r\n    },\r\n    icon: {\r\n        marginTop: 5,\r\n        marginBottom: 5,\r\n        marginLeft: 20\r\n    }\r\n}\r\n\r\n\r\nconst GetPixelPositionOffset = (width, height) => {\r\n    return { x: -(width / 2), y: -(height / 2) };\r\n}\r\n\r\nconst CreateJobGoogleMap = withGoogleMap(props => (\r\n    <GoogleMap\r\n        ref={props.onMapLoad}\r\n        defaultZoom={16}\r\n        defaultCenter={{ lat: 50.8202949, lng: -0.1406958 }}\r\n        onClick={props.onMapClick}>\r\n\r\n        <OverlayView\r\n            key='createJobKey'\r\n            mapPaneName={OverlayView.OVERLAY_MOUSE_TARGET}\r\n            position={props.currentPosition}\r\n            getPixelPositionOffset={GetPixelPositionOffset}>\r\n            <div style={STYLES.overlayView}>\r\n                <img style={STYLES.icon}\r\n                    src='/assets/images/passenger.png' />\r\n                <br />\r\n                <Button\r\n                    type='button'\r\n                    bsSize='xsmall'\r\n                    bsStyle='primary'\r\n                    onClick={() => props.onCreateJobClick()}\r\n                    disabled={props.hasIssuedJob}\r\n                    value='Create Job'>Create Job</Button>\r\n            </div>\r\n        </OverlayView>\r\n    </GoogleMap>\r\n));\r\n\r\n\r\nexport interface CreateJobState {\r\n    currentPosition: Position;\r\n    dimensions: {\r\n        width: number,\r\n        height: number\r\n    };\r\n    hasIssuedJob: boolean;\r\n    okDialogOpen: boolean;\r\n    okDialogKey: number;\r\n    okDialogHeaderText: string;\r\n    okDialogBodyText: string;\r\n    wasSuccessful: boolean;\r\n}\r\n\r\nexport class CreateJob extends React.Component<undefined, CreateJobState> {\r\n\r\n    private _authService: AuthService;\r\n    private _jobService: JobService;\r\n    private _positionService: PositionService;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this._jobService = props.route.jobService;\r\n        this._authService = props.route.authService;\r\n        this._positionService = props.route.positionService;\r\n        console.log(this._authService.userName());\r\n        console.log(this._authService.userEmail());\r\n        console.log(\"CreateJob ctor\");\r\n        console.log(this._jobService);\r\n\r\n        if (!this._authService.isAuthenticated()) {\r\n            hashHistory.push('/');\r\n        }\r\n\r\n        if (this._authService.isDriver()) {\r\n            hashHistory.push('/viewjob');\r\n        }\r\n\r\n        this.state = {\r\n            currentPosition: new Position(50.8202949, -0.1406958),\r\n            dimensions: { width: -1, height: -1 },\r\n            hasIssuedJob: this._jobService.hasIssuedJob(),\r\n            okDialogHeaderText: '',\r\n            okDialogBodyText: '',\r\n            okDialogOpen: false,\r\n            okDialogKey: 0,\r\n            wasSuccessful: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n\r\n        const adjustedwidth = this.state.dimensions.width;\r\n\r\n        return (\r\n            <Well className=\"outer-well\">\r\n                <Grid>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <h4>SET YOUR CURRENT LOCATION</h4>\r\n                            <h6>Click the map to set your current location</h6>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n\r\n                            <Measure\r\n                                bounds\r\n                                onResize={(contentRect) => {\r\n                                    this.setState({ dimensions: contentRect.bounds })\r\n                                }}\r\n                            >\r\n                                {({ measureRef }) =>\r\n                                    <div ref={measureRef}>\r\n                                        <CreateJobGoogleMap\r\n                                            containerElement={\r\n                                                <div style={{\r\n                                                    position: 'relative',\r\n                                                    top: 0,\r\n                                                    left: 0,\r\n                                                    right: 0,\r\n                                                    bottom: 0,\r\n                                                    justifyContent: 'flex-end',\r\n                                                    alignItems: 'center',\r\n                                                    width: { adjustedwidth },\r\n                                                    height: 600,\r\n                                                    marginTop: 20,\r\n                                                    marginLeft: 0,\r\n                                                    marginRight: 0,\r\n                                                    marginBottom: 20\r\n                                                }} />\r\n                                            }\r\n                                            mapElement={\r\n                                                <div style={{\r\n                                                    position: 'relative',\r\n                                                    top: 0,\r\n                                                    left: 0,\r\n                                                    right: 0,\r\n                                                    bottom: 0,\r\n                                                    width: { adjustedwidth },\r\n                                                    height: 600,\r\n                                                    marginTop: 20,\r\n                                                    marginLeft: 0,\r\n                                                    marginRight: 0,\r\n                                                    marginBottom: 20\r\n                                                }} />\r\n                                            }\r\n                                            onMapLoad={this.handleMapLoad}\r\n                                            onMapClick={this.handleMapClick}\r\n                                            currentPosition={this.state.currentPosition}\r\n                                            onCreateJobClick={this.handleCreateJobClick}\r\n                                            hasIssuedJob={this.state.hasIssuedJob}\r\n                                        />\r\n                                    </div>\r\n                                }\r\n                            </Measure>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <span>\r\n                            <OkDialog\r\n                                open={this.state.okDialogOpen}\r\n                                okCallBack={this.okDialogCallBack}\r\n                                headerText={this.state.okDialogHeaderText}\r\n                                bodyText={this.state.okDialogBodyText}\r\n                                key={this.state.okDialogKey} />\r\n                        </span>\r\n                    </Row>\r\n                </Grid>\r\n            </Well>\r\n        );\r\n    }\r\n\r\n    handleCreateJobClick = () => {\r\n\r\n        var self = this;\r\n        var currentUser = this._authService.user();\r\n\r\n        var newJob = {\r\n            jobUUID: UUIDService.createUUID(),\r\n            clientFullName: currentUser.fullName,\r\n            clientEmail: currentUser.email,\r\n            clientPosition: {\r\n                latitude: self.state.currentPosition.latitude,\r\n                longitude: self.state.currentPosition.longitude\r\n            },\r\n            driverFullName: '',\r\n            driverEmail: '',\r\n            vehicleDescription: '',\r\n            vehicleRegistrationNumber: '',\r\n            isAssigned: false,\r\n            isCompleted: false\r\n        }\r\n\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'job/submit',\r\n            data: JSON.stringify(newJob),\r\n            contentType: \"application/json; charset=utf-8\",\r\n            dataType: 'json'\r\n        })\r\n        .done(function (jdata, textStatus, jqXHR) {\r\n            self._jobService.storeUserIssuedJob(newJob);\r\n            const newState = Object.assign({}, self.state, {\r\n                hasIssuedJob: self._jobService.hasIssuedJob()\r\n            });\r\n            self.setState(newState)\r\n            self._positionService.storeUserPosition(self.state.currentPosition);\r\n            hashHistory.push('/viewjob');\r\n        })\r\n        .fail(function (jqXHR, textStatus, errorThrown) {\r\n            const newState = Object.assign({}, self.state, {\r\n                okDialogHeaderText: 'Error',\r\n                okDialogBodyText: jqXHR.responseText,\r\n                okDialogOpen: true,\r\n                okDialogKey: Math.random()\r\n            })\r\n            self.setState(newState)\r\n        });\r\n    }\r\n\r\n    okDialogCallBack = () => {\r\n        this.setState(\r\n            {\r\n                okDialogOpen: false\r\n            });\r\n    }\r\n\r\n    handleMapLoad = (map) => {\r\n        if (map) {\r\n            console.log(map.getZoom());\r\n        }\r\n    }\r\n\r\n    handleMapClick = (event) => {\r\n        const newState = Object.assign({}, this.state, {\r\n            currentPosition: new Position(event.latLng.lat(), event.latLng.lng())\r\n        })\r\n        this.setState(newState)\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/CreateJob.tsx","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { OkDialog } from \"./components/OkDialog\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {\r\n    Well,\r\n    Grid,\r\n    Row,\r\n    Col,\r\n    ButtonInput\r\n} from \"react-bootstrap\";\r\nimport { Form, ValidatedInput } from 'react-bootstrap-validation';\r\nimport revalidator from 'revalidator';\r\nimport { AuthService } from \"./services/AuthService\";\r\n\r\nlet schema = {\r\n    properties: {\r\n        email: {\r\n            type: 'string',\r\n            maxLength: 255,\r\n            format: 'email',\r\n            required: true,\r\n            allowEmpty: false\r\n        },\r\n        password: {\r\n            type: 'string',\r\n            minLength: 8,\r\n            maxLength: 60,\r\n            required: true,\r\n            allowEmpty: false\r\n        }\r\n    }\r\n};\r\n\r\nexport interface LoginState {\r\n    okDialogOpen: boolean;\r\n    okDialogKey: number;\r\n    okDialogHeaderText: string;\r\n    okDialogBodyText: string;\r\n}\r\n\r\nexport class Login extends React.Component<undefined, LoginState> {\r\n\r\n    private _authService: AuthService;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        console.log(props);\r\n        this._authService = props.route.authService;\r\n        this.state = {\r\n            okDialogHeaderText: '',\r\n            okDialogBodyText: '',\r\n            okDialogOpen: false,\r\n            okDialogKey: 0\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Well className=\"outer-well\">\r\n                <Form\r\n                    // Supply callbacks to both valid and invalid\r\n                    // submit attempts\r\n                    validateAll={this.validateForm}\r\n                    onInvalidSubmit={this.handleInvalidSubmit}\r\n                    onValidSubmit={this.handleValidSubmit}>\r\n                    <Grid>\r\n                        <Row className=\"show-grid\">\r\n                            <Col xs={10} md={6}>\r\n                                <h4>ENTER YOUR LOGIN DETAILS</h4>\r\n                                <span><h6>Or click <a href=\"#/register\">here</a> to register</h6></span>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"show-grid\">\r\n                            <Col xs={10} md={6}>\r\n                                <ValidatedInput type='text'\r\n                                    label='Email'\r\n                                    name='email'\r\n                                    errorHelp='Email address is invalid' />\r\n\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"show-grid\">\r\n                            <Col xs={10} md={6}>\r\n                                <ValidatedInput type='password'\r\n                                    name='password'\r\n                                    label='Password'\r\n                                    errorHelp='Password is invalid' />\r\n\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"show-grid\">\r\n                            <Col xs={10} md={6}>\r\n                                <ValidatedInput\r\n                                    type='checkbox'\r\n                                    name='isDriver'\r\n                                    label='Are you a driver?'\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"show-grid\">\r\n                            <Col xs={10} md={6}>\r\n                                <ButtonInput\r\n                                    id=\"loginBtn\"\r\n                                    type='submit'\r\n                                    bsSize='small'\r\n                                    bsStyle='primary'\r\n                                    value='Register'>Login</ButtonInput>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"show-grid\">\r\n                            <span>\r\n                                <OkDialog\r\n                                    open={this.state.okDialogOpen}\r\n                                    okCallBack={this.okDialogCallBack}\r\n                                    headerText={this.state.okDialogHeaderText}\r\n                                    bodyText={this.state.okDialogBodyText}\r\n                                    key={this.state.okDialogKey} />\r\n                            </span>\r\n                        </Row>\r\n                    </Grid>\r\n                </Form>\r\n            </Well>\r\n        )\r\n    }\r\n\r\n    validateForm = (values) => {\r\n        let res = revalidator.validate(values, schema);\r\n\r\n        // If the values passed validation, we return true\r\n        if (res.valid) {\r\n            return true;\r\n        }\r\n\r\n        // Otherwise we should return an object containing errors\r\n        // e.g. { email: true, password: true }\r\n        return res.errors.reduce((errors, error) => {\r\n            // Set each property to either true or\r\n            // a string error description\r\n            errors[error.property] = true;\r\n\r\n            return errors;\r\n        }, {});\r\n    }\r\n\r\n    handleInvalidSubmit = (errors, values) => {\r\n\r\n        console.log(values);\r\n\r\n        // Errors is an array containing input names\r\n        // that failed to validate\r\n        this.setState(\r\n            {\r\n                okDialogHeaderText: 'Validation Error',\r\n                okDialogBodyText: 'Form has errors and may not be submitted',\r\n                okDialogOpen: true,\r\n                okDialogKey: Math.random()\r\n            });\r\n    }\r\n\r\n    handleValidSubmit = (values) => {\r\n        var logindetails = values;\r\n        var self = this;\r\n\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'login/validate',\r\n            data: JSON.stringify(logindetails),\r\n            contentType: \"application/json; charset=utf-8\",\r\n            dataType: 'json'\r\n        })\r\n        .done(function (jdata, textStatus, jqXHR) {\r\n\r\n            console.log(\"result of login\");\r\n            console.log(jqXHR.responseText);\r\n            let currentUser = JSON.parse(jqXHR.responseText);\r\n            let userProfile = {\r\n                isDriver: logindetails.isDriver,\r\n                user: currentUser\r\n            };\r\n            self._authService.storeUser(userProfile);\r\n\r\n            self.setState(\r\n                {\r\n                    okDialogHeaderText: 'Login Successful',\r\n                    okDialogBodyText: 'You are now logged in',\r\n                    okDialogOpen: true,\r\n                    okDialogKey: Math.random()\r\n                });\r\n        })\r\n        .fail(function (jqXHR, textStatus, errorThrown) {\r\n            self.setState(\r\n                {\r\n                    okDialogHeaderText: 'Error',\r\n                    okDialogBodyText: jqXHR.responseText,\r\n                    okDialogOpen: true,\r\n                    okDialogKey: Math.random()\r\n                });\r\n        });\r\n    }\r\n\r\n    okDialogCallBack = () => {\r\n        this.setState(\r\n            {\r\n                okDialogOpen: false\r\n            });\r\n    }\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Login.tsx","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { hashHistory } from 'react-router'\r\nimport { OkDialog } from \"./components/OkDialog\";\r\nimport { YesNoDialog } from \"./components/YesNoDialog\";\r\nimport { AuthService } from \"./services/AuthService\";\r\nimport { JobService } from \"./services/JobService\";\r\nimport { PositionService } from \"./services/PositionService\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {\r\n    Well,\r\n    Grid,\r\n    Row,\r\n    Col,\r\n    ButtonInput\r\n} from \"react-bootstrap\";\r\n\r\nexport interface LogoutState {\r\n    okDialogOpen: boolean;\r\n    okDialogKey: number;\r\n    okDialogHeaderText: string;\r\n    okDialogBodyText: string;\r\n}\r\n\r\nexport class Logout extends React.Component<undefined, LogoutState> {\r\n\r\n    private _authService: AuthService;\r\n    private _jobService: JobService;\r\n    private _positionService: PositionService;\r\n\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        console.log(props);\r\n        this._authService = props.route.authService;\r\n        this._jobService = props.route.jobService;\r\n        this._positionService = props.route.positionService;\r\n\r\n        if (!this._authService.isAuthenticated()) {\r\n            hashHistory.push('/');\r\n        }\r\n\r\n        this.state = {\r\n            okDialogHeaderText: '',\r\n            okDialogBodyText: '',\r\n            okDialogOpen: false,\r\n            okDialogKey: 0\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Well className=\"outer-well\">\r\n                <Grid>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <h4><span>YOU ARE CURRENTLY LOGGED IN AS [{this._authService.userName()}]</span></h4>\r\n                            <span><h6>Click the button to logout</h6></span>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <span>\r\n                            <YesNoDialog\r\n                                theId=\"logoutBtn\"\r\n                                launchButtonText=\"Logout\"\r\n                                yesCallBack={this.logoutYesCallBack}\r\n                                noCallBack={this.logoutNoCallBack}\r\n                                actionPerformed={false}\r\n                                headerText=\"Confirm logout\" />\r\n\r\n                            <OkDialog\r\n                                open={this.state.okDialogOpen}\r\n                                okCallBack={this.okDialogCallBack}\r\n                                headerText={this.state.okDialogHeaderText}\r\n                                bodyText={this.state.okDialogBodyText}\r\n                                key={this.state.okDialogKey} />\r\n                        </span>\r\n                    </Row>\r\n                </Grid>\r\n            </Well>\r\n        )\r\n    }\r\n\r\n    okDialogCallBack = () => {\r\n        this.setState(\r\n            {\r\n                okDialogOpen: false\r\n            });\r\n    }\r\n\r\n    logoutYesCallBack = () => {\r\n\r\n        var email = this._authService.userEmail();\r\n        this._jobService.clearUserIssuedJob();\r\n        this._authService.clearUser();\r\n        this._positionService.clearUserPosition();\r\n        this._positionService.clearUserJobPositions();\r\n\r\n        this.setState(\r\n            {\r\n                okDialogHeaderText: 'Logout',\r\n                okDialogBodyText: 'You have been logged out',\r\n                okDialogOpen: true,\r\n                okDialogKey: Math.random()\r\n            });\r\n\r\n        hashHistory.push('/');\r\n    }\r\n\r\n    logoutNoCallBack = () => {\r\n\r\n    }\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/Logout.tsx","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {\r\n    Well,\r\n    Grid,\r\n    Row,\r\n    Col,\r\n    ButtonInput,\r\n    ButtonGroup,\r\n    Button\r\n} from \"react-bootstrap\";\r\nimport { AuthService } from \"./services/AuthService\";\r\nimport { hashHistory } from 'react-router';\r\nimport { PassengerRegistration } from \"./PassengerRegistration\";\r\nimport { DriverRegistration } from \"./DriverRegistration\";\r\n\r\n\r\nexport interface RegisterState {\r\n    option: string;\r\n}\r\n\r\nexport class Register extends React.Component<undefined, RegisterState> {\r\n\r\n    private _authService: AuthService;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this._authService = props.route.authService;\r\n        this.state = {\r\n            option: 'passenger'\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Well className=\"outer-well\">\r\n                <Grid>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <h4>PLEASE ENTER YOUR REGISTRATION DETAILS</h4>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <h6>Choose your registration type </h6>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ButtonGroup>\r\n                                <Button bsSize='small' onClick={this.onOptionChange.bind(this, 'passenger')} active={this.state.option === 'passenger'}>Passenger</Button>\r\n                                <Button bsSize='small' onClick={this.onOptionChange.bind(this, 'driver')} active={this.state.option === 'driver'}>Driver</Button>\r\n                            </ButtonGroup>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            {this.state.option === 'passenger' ?\r\n                                <div><PassengerRegistration authService={this._authService} /></div> :\r\n                                <div><DriverRegistration authService={this._authService} /></div>\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Grid>\r\n            </Well>\r\n        )\r\n    }\r\n\r\n    onOptionChange(option) {\r\n        this.setState({\r\n            option: option\r\n        });\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Register.tsx","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport * as _ from \"lodash\";\r\nimport Measure from 'react-measure'\r\nimport { RatingDialog } from \"./components/RatingDialog\";\r\nimport { YesNoDialog } from \"./components/YesNoDialog\";\r\nimport { OkDialog } from \"./components/OkDialog\";\r\nimport { AcceptList } from \"./components/AcceptList\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {\r\n    Well,\r\n    Grid,\r\n    Row,\r\n    Col,\r\n    ButtonInput,\r\n    ButtonGroup,\r\n    Button,\r\n    Modal,\r\n    Popover,\r\n    Tooltip,\r\n    OverlayTrigger\r\n} from \"react-bootstrap\";\r\nimport { AuthService } from \"./services/AuthService\";\r\nimport { JobService } from \"./services/JobService\";\r\nimport { JobStreamService } from \"./services/JobStreamService\";\r\nimport { PositionService } from \"./services/PositionService\";\r\nimport { Position } from \"./domain/Position\";\r\nimport { PositionMarker } from \"./domain/PositionMarker\";\r\nimport { hashHistory } from 'react-router';\r\nimport { withGoogleMap, GoogleMap, Marker, OverlayView } from \"react-google-maps\";\r\n\r\nconst STYLES = {\r\n    overlayView: {\r\n        background: `white`,\r\n        border: `1px solid #ccc`,\r\n        padding: 15,\r\n    }\r\n}\r\n\r\n\r\nconst GetPixelPositionOffset = (width, height) => {\r\n    return { x: -(width / 2), y: -(height / 2) };\r\n}\r\n\r\n\r\n\r\nconst ViewJobGoogleMap = withGoogleMap(props => (\r\n\r\n    <GoogleMap\r\n        ref={props.onMapLoad}\r\n        defaultZoom={16}\r\n        defaultCenter={{ lat: 50.8202949, lng: -0.1406958 }}\r\n        onClick={props.onMapClick}>\r\n        {props.markers.map((marker, index) => (\r\n            <OverlayView\r\n                key={marker.key}\r\n                mapPaneName={OverlayView.OVERLAY_MOUSE_TARGET}\r\n                position={marker.position}\r\n                getPixelPositionOffset={GetPixelPositionOffset}>\r\n                <div style={STYLES.overlayView}>\r\n                    <img src={marker.icon} />\r\n                    <strong>{marker.key}</strong>\r\n                </div>\r\n            </OverlayView>\r\n        ))}\r\n    </GoogleMap>\r\n));\r\n\r\n\r\nexport interface ViewJobState {\r\n    markers: Array<PositionMarker>;\r\n    okDialogOpen: boolean;\r\n    okDialogKey: number;\r\n    okDialogHeaderText: string;\r\n    okDialogBodyText: string;\r\n    dimensions: {\r\n        width: number,\r\n        height: number\r\n    },\r\n    currentPosition: Position;\r\n    isJobAccepted: boolean;\r\n    finalActionHasBeenClicked: boolean;\r\n}\r\n\r\ntype DoneCallback = (jdata: any, textStatus: any, jqXHR: any) => void\r\n\r\n\r\nexport class ViewJob extends React.Component<undefined, ViewJobState> {\r\n\r\n    private _authService: AuthService;\r\n    private _jobService: JobService;\r\n    private _jobStreamService: JobStreamService;\r\n    private _positionService: PositionService;\r\n    private _subscription: any; \r\n    private _currentJobUUID: any;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this._authService = props.route.authService;\r\n        this._jobStreamService = props.route.jobStreamService;\r\n        this._jobService = props.route.jobService;\r\n        this._positionService = props.route.positionService;\r\n        \r\n        if (!this._authService.isAuthenticated()) {\r\n            hashHistory.push('/');\r\n        }\r\n\r\n        let savedMarkers: Array<PositionMarker> = new Array<PositionMarker>();\r\n        if (this._positionService.hasJobPositions()) {\r\n            savedMarkers = this._positionService.userJobPositions();\r\n        }\r\n\r\n        this.state = {\r\n            markers: savedMarkers,\r\n            okDialogHeaderText: '',\r\n            okDialogBodyText: '',\r\n            okDialogOpen: false,\r\n            okDialogKey: 0,\r\n            dimensions: { width: -1, height: -1 },\r\n            currentPosition: this._authService.isDriver() ? null :\r\n                this._positionService.currentPosition(),\r\n            isJobAccepted: false,\r\n            finalActionHasBeenClicked: false\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        var self = this;\r\n        this._subscription =\r\n            this._jobStreamService.getJobStream()\r\n            .retry()\r\n            .where(function (x, idx, obs) {\r\n                return self.shouldShowMarkerForJob(x.detail);\r\n            })\r\n            .subscribe(\r\n                jobArgs => {\r\n\r\n                    console.log('RX saw onJobChanged');\r\n                    console.log('RX x = ', jobArgs.detail);\r\n\r\n                    this._jobService.clearUserIssuedJob();\r\n                    this._jobService.storeUserIssuedJob(jobArgs.detail);\r\n                    this.addMarkerForJob(jobArgs.detail);\r\n                },\r\n                error => {\r\n                    console.log('RX saw ERROR');\r\n                    console.log('RX error = ', error);\r\n                },\r\n                () => {\r\n                    console.log('RX saw COMPLETE');\r\n                }\r\n            );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._subscription.dispose();\r\n        this._positionService.storeUserJobPositions(this.state.markers);\r\n    }\r\n\r\n    render() {\r\n\r\n        const adjustedwidth = this.state.dimensions.width;\r\n\r\n        return (\r\n            <Well className=\"outer-well\">\r\n                <Grid>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <h4>CURRENT JOB</h4>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <AcceptList\r\n                                markers={_.filter(this.state.markers, { isDriverIcon: true })}\r\n                                currentUserIsDriver={this._authService.isDriver()}\r\n                                clickCallback={this.handleMarkerClick}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <Measure\r\n                                bounds\r\n                                onResize={(contentRect) => {\r\n                                    this.setState({ dimensions: contentRect.bounds })\r\n                                }}>\r\n                                {({ measureRef }) =>\r\n                                    <div ref={measureRef}>\r\n                                        <ViewJobGoogleMap\r\n                                            containerElement={\r\n                                                <div style={{\r\n                                                    position: 'relative',\r\n                                                    top: 0,\r\n                                                    left: 0,\r\n                                                    right: 0,\r\n                                                    bottom: 0,\r\n                                                    width: { adjustedwidth },\r\n                                                    height: 600,\r\n                                                    justifyContent: 'flex-end',\r\n                                                    alignItems: 'center',\r\n                                                    marginTop: 20,\r\n                                                    marginLeft: 0,\r\n                                                    marginRight: 0,\r\n                                                    marginBottom: 20\r\n                                                }} />\r\n                                            }\r\n                                            mapElement={\r\n                                                <div style={{\r\n                                                    position: 'relative',\r\n                                                    top: 0,\r\n                                                    left: 0,\r\n                                                    right: 0,\r\n                                                    bottom: 0,\r\n                                                    width: { adjustedwidth },\r\n                                                    height: 600,\r\n                                                    marginTop: 20,\r\n                                                    marginLeft: 0,\r\n                                                    marginRight: 0,\r\n                                                    marginBottom: 20\r\n                                                }} />\r\n                                            }\r\n                                            markers={this.state.markers}\r\n                                            onMapClick={this.handleMapClick}\r\n                                        />\r\n                                    </div>\r\n                                }\r\n                            </Measure>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {this.state.isJobAccepted === true ?\r\n                        <Row className=\"show-grid\">\r\n                            <span>\r\n                                <RatingDialog\r\n                                    theId=\"viewJobCompleteBtn\"\r\n                                    headerText=\"Rate your driver/passenger\"\r\n                                    okCallBack={this.ratingsDialogOkCallBack}\r\n                                    actionPerformed={this.state.finalActionHasBeenClicked} />\r\n\r\n                                {!(this._authService.isDriver() === true) ?\r\n\r\n                                    <YesNoDialog\r\n                                        theId=\"viewJobCancelBtn\"\r\n                                        launchButtonText=\"Cancel\"\r\n                                        actionPerformed={this.state.finalActionHasBeenClicked} \r\n                                        yesCallBack={this.jobCancelledCallBack}\r\n                                        noCallBack={this.jobNotCancelledCallBack}\r\n                                        headerText=\"Cancel the job\" />\r\n                                    : \r\n                                    null\r\n                                }\r\n\r\n                                <OkDialog\r\n                                    open={this.state.okDialogOpen}\r\n                                    okCallBack={this.okDialogCallBack}\r\n                                    headerText={this.state.okDialogHeaderText}\r\n                                    bodyText={this.state.okDialogBodyText}\r\n                                    key={this.state.okDialogKey} />\r\n                            </span>\r\n                        </Row> :\r\n                        null\r\n                    }\r\n                </Grid>\r\n            </Well>\r\n        );\r\n    }\r\n\r\n    handleMapClick = (event) => {\r\n\r\n        let currentUser = this._authService.user();\r\n        let isDriver = this._authService.isDriver();\r\n        let matchedMarker = _.find(this.state.markers, { 'email': currentUser.email });\r\n        let newPosition = new Position(event.latLng.lat(), event.latLng.lng());\r\n        let currentJob = this._jobService.currentJob();\r\n        this._positionService.clearUserPosition();\r\n        this._positionService.storeUserPosition(newPosition);\r\n\r\n        if (matchedMarker != undefined) {\r\n            let newMarkersList = this.state.markers;\r\n            _.remove(newMarkersList, function (n) {\r\n                return n.email === matchedMarker.email;\r\n            });\r\n            matchedMarker.position = newPosition;\r\n            newMarkersList.push(matchedMarker);\r\n            const newState = Object.assign({}, this.state, {\r\n                currentPosition: newPosition,\r\n                markers: newMarkersList\r\n            })\r\n            this.setState(newState);\r\n            currentJob = matchedMarker.jobForMarker;\r\n        }\r\n        else {\r\n            if (isDriver) {\r\n                let newDriverMarker =\r\n                    this.createDriverMarker(currentUser, event);\r\n                let newMarkersList = this.state.markers;\r\n                newMarkersList.push(newDriverMarker);\r\n                const newState = Object.assign({}, this.state, {\r\n                    currentPosition: newPosition,\r\n                    markers: newMarkersList\r\n                })\r\n                this.setState(newState);\r\n            }\r\n        }\r\n        this._positionService.clearUserJobPositions();\r\n        this._positionService.storeUserJobPositions(this.state.markers);\r\n        this.pushOutJob(newPosition, currentJob);\r\n    }\r\n\r\n    handleMarkerClick = (targetMarker) => {\r\n\r\n        console.log('button on AcceptList clicked:' + targetMarker.key);\r\n        console.log(targetMarker);\r\n\r\n        let currentJob = this._jobService.currentJob();\r\n        let jobForMarker = targetMarker.jobForMarker;\r\n\r\n        let clientMarker = _.find(this.state.markers, { 'isDriverIcon': false });\r\n        if (clientMarker != undefined && clientMarker != null) {\r\n\r\n            let clientJob = clientMarker.jobForMarker;\r\n            clientJob.driverFullName = jobForMarker.driverFullName;\r\n            clientJob.driverEmail = jobForMarker.driverEmail;\r\n            clientJob.driverPosition = jobForMarker.driverPosition;\r\n            clientJob.vehicleDescription = jobForMarker.vehicleDescription;\r\n            clientJob.vehicleRegistrationNumber = jobForMarker.vehicleRegistrationNumber;\r\n            clientJob.isAssigned = true;\r\n            \r\n            let self = this;\r\n            console.log(\"handleMarkerClick job\");\r\n            console.log(clientJob);\r\n\r\n            this.makePOSTRequest('job/submit', clientJob, this,\r\n                function (jdata, textStatus, jqXHR) {\r\n                    console.log(\"After is accepted\");\r\n                    const newState = Object.assign({}, self.state, {\r\n                        isJobAccepted: true\r\n                    })\r\n                    self.setState(newState);\r\n                });\r\n        }\r\n    }\r\n\r\n    addMarkerForJob = (jobArgs: any): void => {\r\n\r\n        console.log(\"addMarkerForJob\");\r\n        console.log(this.state);\r\n\r\n        if (this.state.isJobAccepted || jobArgs.isAssigned) {\r\n            this.processAcceptedMarkers(jobArgs);\r\n        }\r\n        else {\r\n            this.processNotAcceptedMarkers(jobArgs);\r\n        }\r\n    }\r\n\r\n    processAcceptedMarkers = (jobArgs: any): void => {\r\n\r\n        if (jobArgs.jobUUID != undefined && jobArgs.jobUUID != '')\r\n            this._currentJobUUID = jobArgs.jobUUID;\r\n\r\n        let isDriver = this._authService.isDriver();\r\n        let jobClientEmail = jobArgs.clientEmail;\r\n        let jobDriverEmail = jobArgs.driverEmail;\r\n        let newMarkersList = this.state.markers;\r\n        let newPositionForUser = null;\r\n        let newPositionForDriver = null;\r\n\r\n        console.log(\"JOB ACCEPTED WE NEED TO ONLY SHOW THE RELEVANT MARKERS + CURRENT USER\");\r\n        //1. Should set all the jobs in markers to assigned now\r\n        //2. Should only show the pair that are in the job if current user is one of them \r\n        //   otherwise just current user\r\n        let allowedNamed = [this._authService.userEmail()];\r\n        if (this._authService.userEmail() == jobArgs.clientEmail ||\r\n            this._authService.userEmail() == jobArgs.driverEmail) {\r\n            allowedNamed = [jobArgs.clientEmail, jobArgs.driverEmail];\r\n        }\r\n        let finalList: Array<PositionMarker> = new Array<PositionMarker>();\r\n        for (var i = 0; i < this.state.markers.length; i++) {\r\n            if (allowedNamed.indexOf(this.state.markers[i].email) >= 0) {\r\n                let theMarker = this.state.markers[i];\r\n                theMarker.jobForMarker.isAssigned = true;\r\n                finalList.push(theMarker);\r\n            }\r\n        }\r\n        newMarkersList = finalList;\r\n\r\n        if (this._authService.userEmail() == jobArgs.clientEmail ||\r\n            this._authService.userEmail() == jobArgs.driverEmail) {\r\n\r\n            let clientMarker = _.find(newMarkersList, { 'email': jobArgs.clientEmail });\r\n            if (clientMarker != undefined && clientMarker != null) {\r\n                newPositionForUser = jobArgs.clientPosition;\r\n                clientMarker.position = jobArgs.clientPosition;\r\n            }\r\n\r\n            let driverMarker = _.find(newMarkersList, { 'email': jobArgs.driverEmail });\r\n            if (driverMarker != undefined && driverMarker != null) {\r\n                newPositionForUser = jobArgs.driverPosition;\r\n                driverMarker.position = jobArgs.driverPosition;\r\n            }\r\n        }\r\n        else {\r\n            let matchedMarker = _.find(newMarkersList, { 'email': this._authService.userEmail() });\r\n            newPositionForUser = matchedMarker.position;\r\n        }\r\n\r\n        //update the state\r\n        this.addClientDetailsToDrivers(newMarkersList);\r\n        var newState = this.updateStateForAcceptedMarker(newMarkersList, newPositionForUser);\r\n        this.updateStateForMarkers(newState, newMarkersList, newPositionForUser, jobArgs);\r\n    }\r\n\r\n\r\n    processNotAcceptedMarkers = (jobArgs: any): void => {\r\n\r\n        if (jobArgs.jobUUID != undefined && jobArgs.jobUUID != '')\r\n            this._currentJobUUID = jobArgs.jobUUID;\r\n\r\n        let isDriver = this._authService.isDriver();\r\n        let jobClientEmail = jobArgs.clientEmail;\r\n        let jobDriverEmail = jobArgs.driverEmail;\r\n        let newMarkersList = this.state.markers;\r\n        let newPositionForUser = null;\r\n        let newPositionForDriver = null;\r\n\r\n        console.log(\"JOB NOT ACCEPTED WE NEED TO ONLY ALL\");\r\n\r\n\r\n        //see if the client is in the list (which it may not be). If its not add it, otherwise update it\r\n        if (jobArgs.clientPosition != undefined && jobArgs.clientPosition != null) {\r\n            newPositionForUser = new Position(jobArgs.clientPosition.latitude, jobArgs.clientPosition.longitude);\r\n        }\r\n\r\n        if (jobClientEmail != undefined && jobClientEmail != null &&\r\n            newPositionForUser != undefined && newPositionForUser != null) {\r\n            let matchedMarker = _.find(this.state.markers, { 'email': jobClientEmail });\r\n            if (matchedMarker == null) {\r\n                newMarkersList.push(new PositionMarker(\r\n                    jobArgs.clientFullName,\r\n                    newPositionForUser,\r\n                    jobArgs.clientFullName,\r\n                    jobArgs.clientEmail,\r\n                    false,\r\n                    isDriver,\r\n                    jobArgs)\r\n                );\r\n            }\r\n            else {\r\n                if (jobArgs.clientPosition != undefined && jobArgs.clientPosition != null) {\r\n                    this.updateMatchedUserMarker(\r\n                        jobClientEmail,\r\n                        newMarkersList,\r\n                        newPositionForUser,\r\n                        jobArgs);\r\n                }\r\n            }\r\n        }\r\n\r\n        //see if the driver is in the list (which it may not be). If its not add it, otherwise update it\r\n        if (jobArgs.driverPosition != undefined && jobArgs.driverPosition != null) {\r\n            newPositionForDriver = new Position(jobArgs.driverPosition.latitude, jobArgs.driverPosition.longitude);\r\n        }\r\n\r\n        if (jobDriverEmail != undefined && jobDriverEmail != null &&\r\n            newPositionForDriver != undefined && newPositionForDriver != null) {\r\n            let matchedMarker = _.find(this.state.markers, { 'email': jobDriverEmail });\r\n            if (matchedMarker == null) {\r\n                newMarkersList.push(new PositionMarker(\r\n                    jobArgs.driverFullName,\r\n                    newPositionForDriver,\r\n                    jobArgs.driverFullName,\r\n                    jobArgs.driverEmail,\r\n                    true,\r\n                    isDriver,\r\n                    jobArgs));\r\n            }\r\n            else {\r\n                this.updateMatchedUserMarker(\r\n                    jobDriverEmail,\r\n                    newMarkersList,\r\n                    newPositionForDriver,\r\n                    jobArgs);\r\n            }\r\n        }\r\n\r\n        if (isDriver) {\r\n            newPositionForUser = newPositionForDriver;\r\n        }\r\n\r\n        //update the state\r\n        this.addClientDetailsToDrivers(newMarkersList);\r\n        var newState = this.updateStateForNewMarker(newMarkersList, newPositionForUser);\r\n        this.updateStateForMarkers(newState, newMarkersList, newPositionForUser, jobArgs);\r\n    }\r\n\r\n    addClientDetailsToDrivers = (newMarkersList: PositionMarker[]): void => {\r\n        let clientMarker = _.find(newMarkersList, { 'isDriverIcon': false });\r\n        if (clientMarker != undefined && clientMarker != null) {\r\n            let driverMarkers = _.filter(newMarkersList, { 'isDriverIcon': true });\r\n            for (var i = 0; i < driverMarkers.length; i++) {\r\n                let driversJob = driverMarkers[i].jobForMarker;\r\n                driversJob.jobUUID = clientMarker.jobForMarker.jobUUID;\r\n                driversJob.clientFullName = clientMarker.jobForMarker.clientFullName;\r\n                driversJob.clientEmail = clientMarker.jobForMarker.clientEmail;\r\n                driversJob.clientPosition = clientMarker.jobForMarker.clientPosition;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    updateStateForMarkers = (newState: any, newMarkersList: PositionMarker[], newPositionForUser: Position, jobArgs:any): void => {\r\n\r\n        //Update the list of position markers in the PositionService\r\n        this._positionService.clearUserJobPositions();\r\n        this._positionService.storeUserJobPositions(newMarkersList);\r\n\r\n        //Update the position in the PositionService\r\n        if (newPositionForUser != undefined && newPositionForUser != null) {\r\n            this._positionService.clearUserPosition();\r\n            this._positionService.storeUserPosition(newPositionForUser);\r\n        }\r\n\r\n        this._jobService.clearUserIssuedJob();\r\n        this._jobService.storeUserIssuedJob(jobArgs);\r\n\r\n        //update the state\r\n        this.setState(newState);\r\n    }\r\n\r\n    updateMatchedUserMarker = (jobEmailToCheck: string, newMarkersList: PositionMarker[],\r\n        jobPosition: Position, jobForMarker:any): void => {\r\n\r\n        if (jobEmailToCheck != undefined && jobEmailToCheck != null) {\r\n\r\n            let matchedMarker = _.find(this.state.markers, { 'email': jobEmailToCheck });\r\n            if (matchedMarker != null) {\r\n                //update its position\r\n                matchedMarker.position = jobPosition;\r\n                matchedMarker.jobForMarker = jobForMarker;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    updateStateForNewMarker = (newMarkersList:PositionMarker[], position: Position): any => {\r\n\r\n        if (position != null) {\r\n            return Object.assign({}, this.state, {\r\n                currentPosition: position,\r\n                markers: newMarkersList\r\n            })\r\n        }\r\n        else {\r\n           return Object.assign({}, this.state, {\r\n                markers: newMarkersList\r\n            })\r\n        }\r\n    }\r\n\r\n    updateStateForAcceptedMarker = (newMarkersList: PositionMarker[], position: Position): any => {\r\n\r\n        if (position != null) {\r\n            return Object.assign({}, this.state, {\r\n                currentPosition: position,\r\n                markers: newMarkersList,\r\n                isJobAccepted: true\r\n            })\r\n        }\r\n        else {\r\n            return Object.assign({}, this.state, {\r\n                markers: newMarkersList,\r\n                isJobAccepted: true\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    shouldShowMarkerForJob = (jobArgs: any): boolean => {\r\n\r\n        let isDriver = this._authService.isDriver();\r\n        let currentJob = this._jobService.currentJob();\r\n        let hasJob = currentJob != undefined && currentJob != null;\r\n\r\n        //case 1 - No job exists, to allow driver to add their mark initially\r\n        if (!hasJob && isDriver)\r\n            return true;\r\n        \r\n        //case 2 - Job exists and is unassigned and if there is no other active \r\n        //         job for this client/ driver\r\n        if (hasJob && !currentJob.isAssigned)\r\n            return true;\r\n\r\n        //case 3 - If the job isAssigned and its for the current logged in client/driver\r\n        if (hasJob && currentJob.isAssigned) {\r\n            if (currentJob.clientEmail == jobArgs.clientEmail) {\r\n                return true;\r\n            }\r\n            if (currentJob.driverEmail == jobArgs.driverEmail) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    pushOutJob = (newPosition: Position, jobForMarker : any): void => {\r\n        var self = this;\r\n        let currentUser = this._authService.user();\r\n        let isDriver = this._authService.isDriver();\r\n        let hasIssuedJob = this._jobService.hasIssuedJob();\r\n        let currentJob = jobForMarker;\r\n        let currentPosition = this._positionService.currentPosition();\r\n        var localClientFullName = '';\r\n        var localClientEmail = '';\r\n        var localClientPosition = null;\r\n        var localDriverFullName = '';\r\n        var localDriverEmail = '';\r\n        var localDriverPosition = null;\r\n        var localIsAssigned = false;\r\n\r\n        if (hasIssuedJob) {\r\n            if (currentJob.isAssigned != undefined && currentJob.isAssigned != null) {\r\n                localIsAssigned = currentJob.isAssigned;\r\n            }\r\n            else {\r\n                localIsAssigned = false;\r\n            }\r\n        }\r\n\r\n        //clientFullName\r\n        if (hasIssuedJob) {\r\n            if (currentJob.clientFullName != undefined && currentJob.clientFullName != \"\") {\r\n                localClientFullName = currentJob.clientFullName;\r\n            }\r\n            else {\r\n                localClientFullName = !isDriver ? currentUser.fullName : '';\r\n            }\r\n        }\r\n        //clientEmail\r\n        if (hasIssuedJob) {\r\n            if (currentJob.clientEmail != undefined && currentJob.clientEmail != \"\") {\r\n                localClientEmail = currentJob.clientEmail;\r\n            }\r\n            else {\r\n                localClientEmail = !isDriver ? currentUser.email : '';\r\n            }\r\n        }\r\n        //clientPosition\r\n        if (hasIssuedJob) {\r\n            if (!isDriver) {\r\n                localClientPosition = newPosition\r\n            }\r\n            else {\r\n                if (currentJob.clientPosition != undefined && currentJob.clientPosition != null) {\r\n                    localClientPosition = currentJob.clientPosition;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (hasIssuedJob) {\r\n            //driverFullName\r\n            if (currentJob.driverFullName != undefined && currentJob.driverFullName != \"\") {\r\n                localDriverFullName = currentJob.driverFullName;\r\n            }\r\n            else {\r\n                localDriverFullName = isDriver ? currentUser.fullName : '';\r\n            }\r\n            //driverEmail\r\n            if (currentJob.driverEmail != undefined && currentJob.driverEmail != \"\") {\r\n                localDriverEmail = currentJob.driverEmail;\r\n            }\r\n            else {\r\n                localDriverEmail = isDriver ? currentUser.email : '';\r\n            }\r\n\r\n            //driverPosition\r\n            if (isDriver) {\r\n                localDriverPosition = newPosition\r\n            }\r\n            else {\r\n                if(currentJob.driverPosition != undefined && currentJob.driverPosition != null) {\r\n                    localDriverPosition = currentJob.driverPosition;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            localDriverFullName = currentUser.fullName;\r\n            localDriverEmail = currentUser.email;\r\n            localDriverPosition = isDriver ? currentPosition : null;\r\n        }\r\n\r\n        var newJob = {\r\n            jobUUID: this._currentJobUUID != undefined && this._currentJobUUID != '' ?\r\n                this._currentJobUUID : '',\r\n            clientFullName: localClientFullName,\r\n            clientEmail: localClientEmail,\r\n            clientPosition: localClientPosition,\r\n            driverFullName: localDriverFullName,\r\n            driverEmail: localDriverEmail,\r\n            driverPosition: localDriverPosition,\r\n            vehicleDescription: isDriver ?\r\n                this._authService.user().vehicleDescription : '',\r\n            vehicleRegistrationNumber: isDriver ?\r\n                this._authService.user().vehicleRegistrationNumber : '',\r\n            isAssigned: localIsAssigned,\r\n            isCompleted: false\r\n        }\r\n\r\n        console.log(\"handlpushOutJob job\");\r\n        console.log(newJob);\r\n        this.makePOSTRequest('job/submit', newJob, self,\r\n            function (jdata, textStatus, jqXHR) {\r\n                self._jobService.clearUserIssuedJob();\r\n                self._jobService.storeUserIssuedJob(newJob);\r\n            });\r\n    }\r\n\r\n    createDriverMarker = (\r\n        driver: any,\r\n        event: any): PositionMarker => {\r\n\r\n        let localDriverFullName = driver.fullName;\r\n        let localDriverEmail = driver.email;\r\n        let localDriverPosition = new Position(event.latLng.lat(), event.latLng.lng());\r\n        let localVehicleDescription = this._authService.user().vehicleDescription;\r\n        let localVehicleRegistrationNumber = this._authService.user().vehicleRegistrationNumber;\r\n        let currentUserIsDriver = this._authService.isDriver();\r\n\r\n        var driverJob = {\r\n            jobUUID: this._currentJobUUID != undefined && this._currentJobUUID != '' ?\r\n                this._currentJobUUID : '',\r\n\r\n            driverFullName: localDriverFullName,\r\n            driverEmail: localDriverEmail,\r\n            driverPosition: localDriverPosition,\r\n            vehicleDescription: localVehicleDescription,\r\n            vehicleRegistrationNumber: localVehicleRegistrationNumber,\r\n            isAssigned: false,\r\n            isCompleted: false\r\n        }\t\t\r\n\r\n        return new PositionMarker(\r\n            localDriverFullName,\r\n            localDriverPosition,\r\n            localDriverFullName,\r\n            localDriverEmail,\r\n            true,\r\n            currentUserIsDriver,\r\n            driverJob\r\n        );\r\n    }\r\n\r\n\r\n    \r\n    ratingsDialogOkCallBack = (theRatingScore: number) => {\r\n        console.log('RATINGS OK CLICKED');\r\n\r\n        var self = this;\r\n        let currentUser = this._authService.user();\r\n        let isDriver = this._authService.isDriver();\r\n        let currentJob = this._jobService.currentJob();\r\n        var ratingJSON = null;\r\n\r\n        if (!isDriver) {\r\n            ratingJSON = {\r\n                fromEmail: this._authService.userEmail(),\r\n                toEmail: currentJob.driverEmail,\r\n                score: theRatingScore\r\n            }\r\n        }\r\n        else {\r\n            ratingJSON = {\r\n                fromEmail: this._authService.userEmail(),\r\n                toEmail: currentJob.clientEmail,\r\n                score: theRatingScore\r\n            }\r\n        }\r\n\r\n        this.makePOSTRequest('rating/submit/new', ratingJSON, self,\r\n            function (jdata, textStatus, jqXHR) {\r\n                this._jobService.clearUserIssuedJob();\r\n                this._positionService.clearUserJobPositions();\r\n                this.setState(\r\n                    {\r\n                        okDialogHeaderText: 'Ratings',\r\n                        okDialogBodyText: 'Rating successfully recorded',\r\n                        okDialogOpen: true,\r\n                        okDialogKey: Math.random(),\r\n                        markers: new Array<PositionMarker>(),\r\n                        currentPosition: null,\r\n                        isJobAccepted: false,\r\n                        finalActionHasBeenClicked: true\r\n                    });\r\n            });\r\n    }\r\n\r\n   \r\n    makePOSTRequest = (route: string, jsonData: any, context: ViewJob, doneCallback: DoneCallback) => {\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: route,\r\n            data: JSON.stringify(jsonData),\r\n            contentType: \"application/json; charset=utf-8\",\r\n            dataType: 'json'\r\n        })\r\n        .done(function (jdata, textStatus, jqXHR) {\r\n            doneCallback(jdata, textStatus, jqXHR);\r\n        })\r\n        .fail(function (jqXHR, textStatus, errorThrown) {\r\n            const newState = Object.assign({}, context.state, {\r\n                okDialogHeaderText: 'Error',\r\n                okDialogBodyText: jqXHR.responseText,\r\n                okDialogOpen: true,\r\n                okDialogKey: Math.random()\r\n            })\r\n            context.setState(newState)\r\n        });\r\n    }\r\n\r\n    jobCancelledCallBack = () => {\r\n        console.log('CANCEL YES CLICKED');\r\n        this._jobService.clearUserIssuedJob();\r\n        this._positionService.clearUserJobPositions();\r\n        this.setState(\r\n            {\r\n                okDialogHeaderText: 'Job Cancellaton',\r\n                okDialogBodyText: 'Job successfully cancelled',\r\n                okDialogOpen: true,\r\n                okDialogKey: Math.random(),\r\n                markers: new Array<PositionMarker>(),\r\n                currentPosition: null,\r\n                isJobAccepted: false,\r\n                finalActionHasBeenClicked: true\r\n            });\r\n    }\r\n\r\n    jobNotCancelledCallBack = () => {\r\n        console.log('CANCEL NO CLICKED');\r\n        this.setState(\r\n            {\r\n                okDialogHeaderText: 'Job Cancellaton',\r\n                okDialogBodyText: 'Job remains open',\r\n                okDialogOpen: true,\r\n                okDialogKey: Math.random(),\r\n                finalActionHasBeenClicked: true\r\n            });\r\n    }\r\n\r\n    okDialogCallBack = () => {\r\n        console.log('OK on OkDialog CLICKED');\r\n        this.setState(\r\n            {\r\n                okDialogOpen: false\r\n            });\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/ViewJob.tsx","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport * as _ from \"lodash\";\r\nimport { OkDialog } from \"./components/OkDialog\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {\r\n    Well,\r\n    Grid,\r\n    Row,\r\n    Col,\r\n    Label,\r\n    ButtonInput\r\n} from \"react-bootstrap\";\r\nimport { AuthService } from \"./services/AuthService\";\r\nimport { hashHistory } from 'react-router';\r\n\r\n\r\nclass Rating {\r\n    fromEmail: string\r\n    toEmail: string\r\n    score: number\r\n\r\n    constructor(fromEmail, toEmail, score) {\r\n        this.fromEmail = fromEmail;\r\n        this.toEmail = toEmail;\r\n        this.score = score;\r\n    }\r\n}\r\n\r\n\r\nexport interface ViewRatingState {\r\n    ratings: Array<Rating>;\r\n    overallRating: number;\r\n    okDialogOpen: boolean;\r\n    okDialogKey: number;\r\n    okDialogHeaderText: string;\r\n    okDialogBodyText: string;\r\n    wasSuccessful: boolean;\r\n}\r\n\r\n\r\nexport class ViewRating extends React.Component<undefined, ViewRatingState> {\r\n\r\n    private _authService: AuthService;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this._authService = props.route.authService;\r\n        if (!this._authService.isAuthenticated()) {\r\n            hashHistory.push('/');\r\n        }\r\n        this.state = {\r\n            overallRating: 0,\r\n            ratings: Array(),\r\n            okDialogHeaderText: '',\r\n            okDialogBodyText: '',\r\n            okDialogOpen: false,\r\n            okDialogKey: 0,\r\n            wasSuccessful: false\r\n        };\r\n    }\r\n\r\n\r\n    loadRatingsFromServer = () => {\r\n\r\n        var self = this;\r\n        var currentUserEmail = this._authService.userEmail();\r\n\r\n        $.ajax({\r\n            type: 'GET',\r\n            url: 'rating/byemail?email=' + currentUserEmail,\r\n            contentType: \"application/json; charset=utf-8\",\r\n            dataType: 'json'\r\n        })\r\n        .done(function (jdata, textStatus, jqXHR) {\r\n\r\n            console.log(\"result of GET rating/byemail\");\r\n            console.log(jqXHR.responseText);\r\n            let ratingsObtained = JSON.parse(jqXHR.responseText);\r\n            self.setState(\r\n                {\r\n                    overallRating: _.sumBy(ratingsObtained, 'score'),\r\n                    ratings: ratingsObtained\r\n                });\r\n        })\r\n        .fail(function (jqXHR, textStatus, errorThrown) {\r\n            self.setState(\r\n                {\r\n                    okDialogHeaderText: 'Error',\r\n                    okDialogBodyText: 'Could not load Ratings',\r\n                    okDialogOpen: true,\r\n                    okDialogKey: Math.random()\r\n                });\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadRatingsFromServer();\r\n    }\r\n\r\n    render() {\r\n\r\n        var rowComponents = this.generateRows();\r\n\r\n        return (\r\n            <Well className=\"outer-well\">\r\n                <Grid>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={6} md={6}>\r\n                            <div>\r\n                                <h4>YOUR OVERALL RATING <Label>{this.state.overallRating}</Label></h4>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <h6>The finer details of your ratings are shown below</h6>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <div className=\"table-responsive\">\r\n                                <table className=\"table table-striped table-bordered table-condensed factTable\">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>Rated By</th>\r\n                                            <th>Rating Given</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {rowComponents}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <span>\r\n                            <OkDialog\r\n                                open={this.state.okDialogOpen}\r\n                                okCallBack={this.okDialogCallBack}\r\n                                headerText={this.state.okDialogHeaderText}\r\n                                bodyText={this.state.okDialogBodyText}\r\n                                key={this.state.okDialogKey} />\r\n                        </span>\r\n                    </Row>\r\n                </Grid>\r\n            </Well>\r\n        )\r\n    }\r\n\r\n    okDialogCallBack = () => {\r\n        this.setState(\r\n            {\r\n                okDialogOpen: false\r\n            });\r\n    }\r\n\r\n    generateRows = () => {\r\n        return this.state.ratings.map(function (item) {\r\n            return <tr key={item.fromEmail}>\r\n                <td>{item.fromEmail}</td>\r\n                <td>{item.score}</td>\r\n            </tr>;\r\n\r\n        });\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/ViewRating.tsx","import \"reflect-metadata\";\r\nimport { Container } from \"inversify\";\r\nimport { TYPES } from \"../types\";\r\nimport { AuthService } from \"../services/AuthService\";\r\nimport { JobService } from \"../services/JobService\";\r\nimport { JobStreamService } from \"../services/JobStreamService\";\r\nimport { PositionService } from \"../services/PositionService\";\r\n\r\n\r\nexport class ContainerOperations {\r\n    private static instance: ContainerOperations;\r\n    private _container: Container = new Container();\r\n\r\n    private constructor() {\r\n\r\n    }\r\n\r\n    static getInstance() {\r\n        if (!ContainerOperations.instance) {\r\n            ContainerOperations.instance = new ContainerOperations();\r\n            ContainerOperations.instance.createInversifyContainer();\r\n        }\r\n        return ContainerOperations.instance;\r\n    }\r\n\r\n    private createInversifyContainer() {\r\n        this.container.bind<AuthService>(TYPES.AuthService).to(AuthService);\r\n        this.container.bind<JobService>(TYPES.JobService).to(JobService);\r\n        this.container.bind<JobStreamService>(TYPES.JobStreamService).to(JobStreamService);\r\n        this.container.bind<PositionService>(TYPES.PositionService).to(PositionService);\r\n    }\r\n\r\n    public get container(): Container {\r\n        return this._container;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/ioc/ContainerOperations.ts","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { OkDialog } from \"./components/OkDialog\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {\r\n    Well,\r\n    Grid,\r\n    Row,\r\n    Col,\r\n    ButtonInput\r\n} from \"react-bootstrap\";\r\nimport { AuthService } from \"./services/AuthService\";\r\nimport { hashHistory } from 'react-router';\r\nimport { Form, ValidatedInput } from 'react-bootstrap-validation';\r\nimport revalidator from 'revalidator';\r\n\r\n\r\nlet schema = {\r\n    properties: {\r\n        fullName: {\r\n            type: 'string',\r\n            minLength: 8,\r\n            maxLength: 60,\r\n            required: true,\r\n            allowEmpty: false\r\n        },\r\n        email: {\r\n            type: 'string',\r\n            maxLength: 255,\r\n            format: 'email',\r\n            required: true,\r\n            allowEmpty: false\r\n        },\r\n        password: {\r\n            type: 'string',\r\n            minLength: 8,\r\n            maxLength: 60,\r\n            required: true,\r\n            allowEmpty: false\r\n        },\r\n        vehicleDescription: {\r\n            type: 'string',\r\n            minLength: 6,\r\n            maxLength: 60,\r\n            required: true,\r\n            allowEmpty: false\r\n        },\r\n        vehicleRegistrationNumber: {\r\n            type: 'string',\r\n            minLength: 6,\r\n            maxLength: 30,\r\n            required: true,\r\n            allowEmpty: false\r\n        }\r\n    }\r\n};\r\n\r\nexport interface DriverRegistrationProps {\r\n    authService: AuthService;\r\n}\r\n\r\nexport interface DriverRegistrationState {\r\n    okDialogOpen: boolean;\r\n    okDialogKey: number;\r\n    okDialogHeaderText: string;\r\n    okDialogBodyText: string;\r\n    wasSuccessful: boolean;\r\n}\r\n\r\nexport class DriverRegistration extends React.Component<DriverRegistrationProps, DriverRegistrationState> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            okDialogHeaderText: '',\r\n            okDialogBodyText: '',\r\n            okDialogOpen: false,\r\n            okDialogKey: 0,\r\n            wasSuccessful: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form className=\"submittable-form-inner\"\r\n                // Supply callbacks to both valid and invalid\r\n                // submit attempts\r\n                validateAll={this.validateForm}\r\n                onInvalidSubmit={this.handleInvalidSubmit}\r\n                onValidSubmit={this.handleValidSubmit}>\r\n                <Grid>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <h4>Driver details</h4>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ValidatedInput type='text'\r\n                                label='FullName'\r\n                                name='fullName'\r\n                                errorHelp='FullName is invalid' />\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ValidatedInput type='text'\r\n                                label='Email'\r\n                                name='email'\r\n                                errorHelp='Email address is invalid' />\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ValidatedInput type='password'\r\n                                name='password'\r\n                                label='Password'\r\n                                errorHelp='Password is invalid' />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <h4>Vehicle details</h4>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ValidatedInput type='text'\r\n                                label='Vehicle Description'\r\n                                name='vehicleDescription'\r\n                                errorHelp='Vehicle description is invalid' />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ValidatedInput type='text'\r\n                                label='Vehicle Registration Number'\r\n                                name='vehicleRegistrationNumber'\r\n                                errorHelp='Vehicle registration number is invalid' />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ButtonInput\r\n                                id=\"registerBtn\"\r\n                                type='submit'\r\n                                bsSize='small'\r\n                                bsStyle='primary'\r\n                                value='Register'>Register</ButtonInput>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <span>\r\n                            <OkDialog\r\n                                open={this.state.okDialogOpen}\r\n                                okCallBack={this.okDialogCallBack}\r\n                                headerText={this.state.okDialogHeaderText}\r\n                                bodyText={this.state.okDialogBodyText}\r\n                                key={this.state.okDialogKey} />\r\n                        </span>\r\n                    </Row>\r\n                </Grid>\r\n            </Form>\r\n        )\r\n    }\r\n\r\n\r\n    validateForm = (values) => {\r\n        let res = revalidator.validate(values, schema);\r\n\r\n        // If the values passed validation, we return true\r\n        if (res.valid) {\r\n            return true;\r\n        }\r\n\r\n        // Otherwise we should return an object containing errors\r\n        // e.g. { email: true, password: true }\r\n        return res.errors.reduce((errors, error) => {\r\n            // Set each property to either true or\r\n            // a string error description\r\n            errors[error.property] = true;\r\n\r\n            return errors;\r\n        }, {});\r\n    }\r\n\r\n    handleInvalidSubmit = (errors, values) => {\r\n        // Errors is an array containing input names\r\n        // that failed to validate\r\n        this.setState(\r\n            {\r\n                okDialogHeaderText: 'Validation Error',\r\n                okDialogBodyText: 'Form has errors and may not be submitted',\r\n                okDialogOpen: true,\r\n                okDialogKey: Math.random()\r\n            });\r\n    }\r\n\r\n    handleValidSubmit = (values) => {\r\n        var driver = values;\r\n        var self = this;\r\n\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'registration/save/driver',\r\n            data: JSON.stringify(driver),\r\n            contentType: \"application/json; charset=utf-8\",\r\n            dataType: 'json'\r\n        })\r\n        .done(function (jdata, textStatus, jqXHR) {\r\n            var redactedDriver = driver;\r\n            redactedDriver.password = \"\";\r\n            console.log(\"redacted ${redactedDriver}\");\r\n            console.log(redactedDriver);\r\n            console.log(\"Auth Service\");\r\n            console.log(self.props.authService);\r\n            let userProfile = {\r\n                isDriver: true,\r\n                user: redactedDriver\r\n            };\r\n            self.setState(\r\n                {\r\n                    okDialogHeaderText: 'Registration Successful',\r\n                    okDialogBodyText: 'You are now registered',\r\n                    okDialogOpen: true,\r\n                    okDialogKey: Math.random()\r\n                });\r\n            self.props.authService.storeUser(userProfile);\r\n        })\r\n        .fail(function (jqXHR, textStatus, errorThrown) {\r\n            self.setState(\r\n                {\r\n                    okDialogHeaderText: 'Error',\r\n                    okDialogBodyText: jqXHR.responseText,\r\n                    okDialogOpen: true,\r\n                    okDialogKey: Math.random()\r\n                });\r\n        });\r\n    }\r\n\r\n    okDialogCallBack = () => {\r\n        this.setState(\r\n            {\r\n                okDialogOpen: false\r\n            });\r\n        if (this.state.wasSuccessful) {\r\n            hashHistory.push('/viewjob');\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/DriverRegistration.tsx","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { OkDialog } from \"./components/OkDialog\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {\r\n    Well,\r\n    Grid,\r\n    Row,\r\n    Col,\r\n    ButtonInput\r\n} from \"react-bootstrap\";\r\nimport { AuthService } from \"./services/AuthService\";\r\nimport { hashHistory } from 'react-router';\r\nimport { Form, ValidatedInput } from 'react-bootstrap-validation';\r\nimport revalidator from 'revalidator';\r\n\r\n\r\nlet schema = {\r\n    properties: {\r\n        fullName: {\r\n            type: 'string',\r\n            minLength: 8,\r\n            maxLength: 60,\r\n            required: true,\r\n            allowEmpty: false\r\n        },\r\n        email: {\r\n            type: 'string',\r\n            maxLength: 255,\r\n            format: 'email',\r\n            required: true,\r\n            allowEmpty: false\r\n        },\r\n        password: {\r\n            type: 'string',\r\n            minLength: 8,\r\n            maxLength: 60,\r\n            required: true,\r\n            allowEmpty: false\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport interface PassengerRegistrationProps {\r\n    authService: AuthService;\r\n}\r\n\r\n\r\nexport interface PassengerRegistrationState {\r\n    okDialogOpen: boolean;\r\n    okDialogKey: number;\r\n    okDialogHeaderText: string;\r\n    okDialogBodyText: string;\r\n    wasSuccessful: boolean;\r\n}\r\n\r\nexport class PassengerRegistration extends React.Component<PassengerRegistrationProps, PassengerRegistrationState> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            okDialogHeaderText: '',\r\n            okDialogBodyText: '',\r\n            okDialogOpen: false,\r\n            okDialogKey: 0,\r\n            wasSuccessful: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form className=\"submittable-form-inner\"\r\n                // Supply callbacks to both valid and invalid\r\n                // submit attempts\r\n                validateAll={this.validateForm}\r\n                onInvalidSubmit={this.handleInvalidSubmit}\r\n                onValidSubmit={this.handleValidSubmit}>\r\n                <Grid>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <h4>Passenger details</h4>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ValidatedInput type='text'\r\n                                label='FullName'\r\n                                name='fullName'\r\n                                errorHelp='FullName is invalid' />\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ValidatedInput type='text'\r\n                                label='Email'\r\n                                name='email'\r\n                                errorHelp='Email address is invalid' />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ValidatedInput type='password'\r\n                                label='Password'\r\n                                name='password'\r\n                                errorHelp='Password is invalid' />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={10} md={6}>\r\n                            <ButtonInput\r\n                                id=\"registerBtn\"\r\n                                type='submit'\r\n                                bsSize='small'\r\n                                bsStyle='primary'\r\n                                value='Register'>Register</ButtonInput>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"show-grid\">\r\n                        <span>\r\n                            <OkDialog\r\n                                open={this.state.okDialogOpen}\r\n                                okCallBack={this.okDialogCallBack}\r\n                                headerText={this.state.okDialogHeaderText}\r\n                                bodyText={this.state.okDialogBodyText}\r\n                                key={this.state.okDialogKey} />\r\n                        </span>\r\n                    </Row>\r\n                </Grid>\r\n            </Form>\r\n        )\r\n    }\r\n\r\n    validateForm = (values) => {\r\n        let res = revalidator.validate(values, schema);\r\n\r\n        // If the values passed validation, we return true\r\n        if (res.valid) {\r\n            return true;\r\n        }\r\n\r\n        // Otherwise we should return an object containing errors\r\n        // e.g. { email: true, password: true }\r\n        return res.errors.reduce((errors, error) => {\r\n            // Set each property to either true or\r\n            // a string error description\r\n            errors[error.property] = true;\r\n\r\n            return errors;\r\n        }, {});\r\n    }\r\n\r\n    handleInvalidSubmit = (errors, values) => {\r\n        // Errors is an array containing input names\r\n        // that failed to validate\r\n        this.setState(\r\n            {\r\n                okDialogHeaderText: 'Validation Error',\r\n                okDialogBodyText: 'Form has errors and may not be submitted',\r\n                okDialogOpen: true,\r\n                okDialogKey: Math.random()\r\n            });\r\n    }\r\n\r\n    handleValidSubmit = (values) => {\r\n        var passenger = values;\r\n        var self = this;\r\n\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: 'registration/save/passenger',\r\n            data: JSON.stringify(passenger),\r\n            contentType: \"application/json; charset=utf-8\",\r\n            dataType: 'json'\r\n        })\r\n        .done(function (jdata, textStatus, jqXHR) {\r\n            var redactedPassenger = passenger;\r\n            redactedPassenger.password = \"\";\r\n            console.log(\"redacted ${redactedPassenger}\");\r\n            console.log(redactedPassenger);\r\n            console.log(\"Auth Service\");\r\n            console.log(self.props.authService);\r\n            let userProfile = {\r\n                isDriver: false,\r\n                user: redactedPassenger\r\n            };\r\n            self.setState(\r\n                {\r\n                    wasSuccessful: true,\r\n                    okDialogHeaderText: 'Registration Successful',\r\n                    okDialogBodyText: 'You are now registered',\r\n                    okDialogOpen: true,\r\n                    okDialogKey: Math.random()\r\n                });\r\n            self.props.authService.storeUser(userProfile);\r\n        })\r\n        .fail(function (jqXHR, textStatus, errorThrown) {\r\n            self.setState(\r\n                {\r\n                    okDialogHeaderText: 'Error',\r\n                    okDialogBodyText: jqXHR.responseText,\r\n                    okDialogOpen: true,\r\n                    okDialogKey: Math.random()\r\n                });\r\n        });\r\n    }\r\n\r\n    okDialogCallBack = () => {\r\n        this.setState(\r\n            {\r\n                okDialogOpen: false\r\n            });\r\n\r\n        if (this.state.wasSuccessful) {\r\n            hashHistory.push('/');\r\n        }\r\n    }\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/PassengerRegistration.tsx","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport * as _ from \"lodash\";\r\nimport { PositionMarker } from \"../domain/PositionMarker\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport\r\n{\r\n    Button, \r\n    Modal,\r\n    Grid,\r\n    Row,\r\n    Col\r\n} from \"react-bootstrap\";\r\n\r\n\r\nexport interface AcceptListProps {\r\n    markers: PositionMarker[];\r\n    currentUserIsDriver: boolean;\r\n    clickCallback(marker: PositionMarker): void;\r\n}\r\n\r\nexport interface AcceptListState {\r\n    value: string;\r\n}\r\n\r\n\r\nexport class AcceptList extends React.Component<AcceptListProps, AcceptListState> {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(this.props);\r\n        //set initial state\r\n        this.state = {\r\n            value: ''\r\n        };\r\n    }\r\n\r\n    getAcceptButtonCss = (currentUserIsDriver: boolean): string => {\r\n\r\n        if (this.props.markers.length == 0 || this.props.markers == undefined) {\r\n            return \"displayNone\";\r\n        }\r\n\r\n        if (!currentUserIsDriver) {\r\n            return \"displayBlock\";\r\n        }\r\n        else {\r\n            return \"displayNone\";\r\n        }\r\n    }\r\n\r\n    onButtonClick = (): void => {\r\n        let marker = _.find(this.props.markers, { name: this.state.value });\r\n        this.props.clickCallback(marker);\r\n    }\r\n\r\n    onChange = (event): void => {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    forceUpdateToSelectedItem = (): void => {\r\n        if (this.props.markers.length > 0 && this.state.value == '') {\r\n            this.setState({ value: this.props.markers[0].key});\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        this.forceUpdateToSelectedItem();\r\n\r\n        return (\r\n            <div className={this.getAcceptButtonCss(this.props.currentUserIsDriver)}>\r\n                <Grid>\r\n                    <Row className=\"show-grid\">\r\n                        <Col xs={6} md={4}>\r\n                            <select name='acceptItems'\r\n                                value={this.state.value}\r\n                                onChange={this.onChange}>\r\n                                {this.props.markers.map(fbb =>\r\n                                    <option key={fbb.key} value={fbb.name}>{fbb.name}</option>\r\n                                )};\r\n                            </select>\r\n                        </Col>\r\n                        <Col xs={6} md={8}>\r\n                            <Button\r\n                                onClick={this.onButtonClick}\r\n                                type='button'\r\n                                bsSize='xsmall'\r\n                                bsStyle='primary'>Accept</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/AcceptList.tsx","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport * as _ from \"lodash\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport\r\n{\r\n    Button,\r\n    Modal\r\n} from \"react-bootstrap\";\r\nimport ReactStars from 'react-stars';\r\n\r\n\r\nexport interface RatingDialogProps {\r\n    headerText: string;\r\n    theId: string;\r\n    actionPerformed: boolean;\r\n    okCallBack(rating: number): void;\r\n}\r\n\r\nexport interface RatingDialogState {\r\n    showModal: boolean;\r\n    rating: number;\r\n    ratingText: string;\r\n}\r\n\r\n\r\nconst GetButtonCss = (actionPerformed: boolean): string => {\r\n\r\n    if (!actionPerformed) {\r\n        return \"displayBlock\";\r\n    }\r\n    else {\r\n        return \"displayNone\";\r\n    }\r\n}\r\n\r\nexport class RatingDialog extends React.Component<RatingDialogProps, RatingDialogState> {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(this.props);\r\n        //set initial state\r\n        this.state = {\r\n            showModal: false,\r\n            rating:0,\r\n            ratingText: ''\r\n        };\r\n    }\r\n\r\n    close = () => {\r\n        this.setState(\r\n        {\r\n            showModal: false,\r\n            rating:0,\r\n            ratingText:''\r\n        });\r\n    }\r\n\r\n    open = () => {\r\n        this.setState(\r\n        {\r\n            showModal: true,\r\n            rating: 0,\r\n            ratingText:'Current rating 0'\r\n        });\r\n    }\r\n\r\n    ratingChanged = (newRating) => {\r\n        console.log(newRating)\r\n        this.setState(\r\n            {\r\n                rating: newRating,\r\n                ratingText:'Current rating ' + newRating\r\n            });\r\n    }\r\n\r\n    okClicked = () => {\r\n        this.close();\r\n        this.props.okCallBack(this.state.rating);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n        <div className=\"leftFloat\">\r\n\r\n            <Button id={this.props.theId}\r\n                    type='button'\r\n                    bsSize='small'\r\n                    bsStyle='primary'\r\n                    className={GetButtonCss(this.props.actionPerformed)}\r\n                    onClick={this.open}>\r\n                Complete\r\n            </Button>\r\n\r\n            <Modal show={this.state.showModal} onHide={this.close}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{ this.props.headerText }</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <h4>Give your rating between 1-5</h4>\r\n                    <h5>{this.state.ratingText}</h5>\r\n                    <ReactStars count={5}\r\n                                onChange={this.ratingChanged}\r\n                                size={24}\r\n                                color2={'#ffd700'} />\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button type='submit'\r\n                            bsSize='small'\r\n                            bsStyle='primary'\r\n                            onClick={this.okClicked}>\r\n                        Ok\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/RatingDialog.tsx","export class JobEventArgs {\r\n\r\n    detail: any;\r\n\r\n    constructor(detail: any) {\r\n        this.detail = detail;\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/domain/JobEventArgs.ts","import { Position } from \"./Position\";\r\n\r\nexport class PositionMarker {\r\n\r\n    key: string;\r\n    position: Position;\r\n    name: string;\r\n    email: string;\r\n    icon: string;\r\n    isDriverIcon: boolean;\r\n    currentUserIsDriver: boolean;\r\n    jobForMarker: any;\r\n\r\n    constructor(\r\n        key: string,\r\n        position: Position,\r\n        name: string,\r\n        email: string,\r\n        isDriverIcon: boolean,\r\n        currentUserIsDriver: boolean,\r\n        jobForMarker: any) {\r\n\r\n        this.key = key;\r\n        this.position = position;\r\n        this.name = name;\r\n        this.email = email;\r\n        this.icon = this.createIcon(isDriverIcon);\r\n        this.isDriverIcon = isDriverIcon;\r\n        this.currentUserIsDriver = currentUserIsDriver;\r\n        this.jobForMarker = jobForMarker;\r\n\r\n    }\r\n\r\n    createIcon = (isDriverIcon: boolean): string => {\r\n        return isDriverIcon ? '/assets/images/driver.png' : '/assets/images/passenger.png';\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/domain/PositionMarker.ts","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {\r\n    Nav,\r\n    Navbar,\r\n    NavItem,\r\n    NavDropdown,\r\n    MenuItem,\r\n    Button\r\n} from \"react-bootstrap\";\r\nimport { Router, Route, hashHistory } from 'react-router'\r\nimport { Login } from \"./Login\";\r\nimport { Logout } from \"./Logout\";\r\nimport { Register } from \"./Register\";\r\nimport { CreateJob } from \"./CreateJob\";\r\nimport { ViewJob } from \"./ViewJob\";\r\nimport { ViewRating } from \"./ViewRating\";\r\nimport { ContainerOperations } from \"./ioc/ContainerOperations\";\r\nimport { AuthService } from \"./services/AuthService\";\r\nimport { JobService } from \"./services/JobService\";\r\nimport { JobStreamService } from \"./services/JobStreamService\";\r\nimport { PositionService } from \"./services/PositionService\";\r\nimport { TYPES } from \"./types\";\r\nimport Rx from 'rx';\r\n\r\nlet authService = ContainerOperations.getInstance().container.get<AuthService>(TYPES.AuthService);\r\nlet jobService = ContainerOperations.getInstance().container.get<JobService>(TYPES.JobService);\r\nlet jobStreamService = ContainerOperations.getInstance().container.get<JobStreamService>(TYPES.JobStreamService);\r\nlet positionService = ContainerOperations.getInstance().container.get<PositionService>(TYPES.PositionService);\r\njobStreamService.init();\r\n\r\n\r\nexport interface MainNavProps {\r\n    authService: AuthService;\r\n    jobService: JobService;\r\n    jobStreamService: JobStreamService;\r\n    positionService: PositionService;\r\n\r\n}\r\n\r\nexport interface MainNavState {\r\n    isLoggedIn: boolean;\r\n}\r\n\r\nclass MainNav extends React.Component<MainNavProps, MainNavState> {\r\n\r\n    private _subscription: any;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        console.log(props);\r\n        this.state = {\r\n            isLoggedIn: false\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        this._subscription = this.props.authService.getAuthenticationStream()\r\n            .subscribe(isAuthenticated => {\r\n                this.state = {\r\n                    isLoggedIn: isAuthenticated\r\n                };\r\n                if (this.state.isLoggedIn) {\r\n                    hashHistory.push('/createjob');\r\n                }\r\n                else {\r\n                    hashHistory.push('/');\r\n                }\r\n            });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._subscription.dispose();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.state.isLoggedIn ?\r\n                <Navbar collapseOnSelect>\r\n                    <Navbar.Header>\r\n                        <Navbar.Brand>\r\n                            <span>Simple Kafka-Uber</span>\r\n                        </Navbar.Brand>\r\n                        <Navbar.Toggle />\r\n                    </Navbar.Header>\r\n                    <Navbar.Collapse>\r\n                        <Nav pullRight>\r\n                            <NavItem eventKey={2} href='#/logout'>Logout</NavItem>\r\n                            <NavItem eventKey={2} href='#/createjob'>Create Job</NavItem>\r\n                            <NavItem eventKey={2} href='#/viewjob'>View Job</NavItem>\r\n                            <NavItem eventKey={2} href='#/viewrating'>View Rating</NavItem>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Navbar> :\r\n                <Navbar pullRight collapseOnSelect>\r\n                    <Navbar.Header>\r\n                        <Navbar.Brand>\r\n                            <span>Simple Kafka-Uber</span>\r\n                        </Navbar.Brand>\r\n                        <Navbar.Toggle />\r\n                    </Navbar.Header>\r\n                    <Navbar.Collapse>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n        )\r\n    }\r\n}\r\n\r\nclass App extends React.Component<undefined, undefined> {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <MainNav\r\n                        authService={authService}\r\n                        jobService={jobService}\r\n                        jobStreamService={jobStreamService}\r\n                        positionService={positionService}\r\n                    />\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nReactDOM.render((\r\n    <Router history={hashHistory}>\r\n        <Route component={App}>\r\n            <Route\r\n                path=\"/\"\r\n                component={Login}\r\n                authService={authService} />\r\n            <Route\r\n                path=\"/register\"\r\n                component={Register}\r\n                authService={authService} />\r\n            <Route\r\n                path=\"/logout\"\r\n                component={Logout}\r\n                authService={authService}\r\n                jobService={jobService}\r\n                positionService={positionService} />\r\n            <Route\r\n                path=\"/createjob\"\r\n                component={CreateJob}\r\n                authService={authService}\r\n                jobService={jobService}\r\n                positionService={positionService} />\r\n            <Route\r\n                path=\"/viewjob\"\r\n                component={ViewJob}\r\n                authService={authService}\r\n                jobService={jobService}\r\n                jobStreamService={jobStreamService}\r\n                positionService={positionService} />\r\n            <Route\r\n                path=\"/viewrating\"\r\n                component={ViewRating}\r\n                authService={authService} />\r\n        </Route>\r\n    </Router>\r\n), document.getElementById('root'));\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.tsx","import { injectable, inject } from \"inversify\";\r\nimport { TYPES } from \"../../src/types\";\r\nimport { AuthService } from \"./AuthService\";\r\n\r\n\r\n@injectable()\r\nexport class JobService {\r\n\r\n    private _hasIssuedJob: boolean;\r\n    private _authService: AuthService;\r\n\r\n    constructor(@inject(TYPES.AuthService) authService: AuthService) {\r\n        this._hasIssuedJob = false;\r\n        this._authService = authService;\r\n    }\r\n\r\n    clearUserIssuedJob = (): void => {\r\n        this._hasIssuedJob = false;\r\n        let keyCurrentUserIssuedJob = 'currentUserIssuedJob_' + this._authService.userEmail();\r\n        sessionStorage.removeItem(keyCurrentUserIssuedJob);\r\n\r\n    }\r\n\r\n    storeUserIssuedJob = (job: any): void => {\r\n\r\n        if (job == null || job == undefined)\r\n            return;\r\n\r\n        this._hasIssuedJob = true;\r\n        let keyCurrentUserIssuedJob = 'currentUserIssuedJob_' + this._authService.userEmail();\r\n        sessionStorage.setItem(keyCurrentUserIssuedJob, JSON.stringify(job));\r\n    }\r\n\r\n    currentJob = (): any => {\r\n        let keyCurrentUserIssuedJob = 'currentUserIssuedJob_' + this._authService.userEmail();\r\n        var currentUsersJob = JSON.parse(sessionStorage.getItem(keyCurrentUserIssuedJob));\r\n        return currentUsersJob;\r\n    }\r\n\r\n    hasIssuedJob = (): boolean => {\r\n        return this._hasIssuedJob;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/services/JobService.ts","import { injectable, inject } from \"inversify\";\r\nimport { JobEventArgs } from \"../domain/JobEventArgs\";\r\nimport Rx from 'rx';\r\n\r\n@injectable()\r\nexport class JobStreamService {\r\n\r\n    private _jobSourceObservable: Rx.Observable<any>;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    init = (): void => {\r\n\r\n        window['jobChanged'] = function (incomingJsonPayload: any) {\r\n            let evt = new CustomEvent('onJobChanged', new JobEventArgs(incomingJsonPayload));\r\n            window.dispatchEvent(evt);\r\n        }\r\n\r\n        this._jobSourceObservable = Rx.Observable.fromEvent(window, 'onJobChanged');\r\n    }\r\n\r\n    getJobStream = (): Rx.Observable<any> => {\r\n        return this._jobSourceObservable;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/services/JobStreamService.ts","import { injectable, inject } from \"inversify\";\r\nimport { Position } from \"../domain/Position\";\r\nimport { PositionMarker } from \"../domain/PositionMarker\";\r\nimport { TYPES } from \"../../src/types\";\r\nimport { AuthService } from \"./AuthService\";\r\n\r\n\r\n@injectable()\r\nexport class PositionService {\r\n\r\n    private _authService: AuthService;\r\n\r\n    constructor( @inject(TYPES.AuthService) authService: AuthService) {\r\n        this._authService = authService;\r\n    }\r\n\r\n    clearUserJobPositions = (): void => {\r\n        let keyCurrentUserJobPositions = 'currentUserJobPositions_' + this._authService.userEmail();\r\n        sessionStorage.removeItem(keyCurrentUserJobPositions);\r\n    }\r\n\r\n    storeUserJobPositions = (jobPositions: Array<PositionMarker>): void => {\r\n\r\n        if (jobPositions == null || jobPositions == undefined)\r\n            return;\r\n\r\n        let currentUsersJobPositions = {\r\n            currentUser: this._authService.user(),\r\n            jobPositions: jobPositions\r\n        }\r\n        let keyCurrentUserJobPositions = 'currentUserJobPositions_' + this._authService.userEmail();\r\n        sessionStorage.setItem(keyCurrentUserJobPositions, JSON.stringify(currentUsersJobPositions));\r\n    }\r\n\r\n    userJobPositions = (): Array<PositionMarker> => {\r\n        let keyCurrentUserJobPositions = 'currentUserJobPositions_' + this._authService.userEmail();\r\n        var currentUserJobPositions = JSON.parse(sessionStorage.getItem(keyCurrentUserJobPositions));\r\n        return currentUserJobPositions.jobPositions;\r\n    }\r\n\r\n    hasJobPositions = (): boolean => {\r\n        let keyCurrentUserJobPositions = 'currentUserJobPositions_' + this._authService.userEmail();\r\n        var currentUserJobPositions = JSON.parse(sessionStorage.getItem(keyCurrentUserJobPositions));\r\n        return currentUserJobPositions != null && currentUserJobPositions != undefined;\r\n    }\r\n\r\n    clearUserPosition = (): void => {\r\n        let keyCurrentUserPosition = 'currentUserPosition_' + this._authService.userEmail();\r\n        sessionStorage.removeItem(keyCurrentUserPosition);\r\n    }\r\n\r\n    storeUserPosition = (position: Position): void => {\r\n\r\n        if (position == null || position == undefined)\r\n            return;\r\n\r\n        let currentUsersPosition = {\r\n            currentUser: this._authService.user(),\r\n            position: position\r\n        }\r\n        let keyCurrentUserPosition = 'currentUserPosition_' + this._authService.userEmail();\r\n        sessionStorage.setItem(keyCurrentUserPosition, JSON.stringify(currentUsersPosition));\r\n    }\r\n\r\n    currentPosition = (): Position => {\r\n        let keyCurrentUserPosition = 'currentUserPosition_' + this._authService.userEmail();\r\n        var currentUsersPosition = JSON.parse(sessionStorage.getItem(keyCurrentUserPosition));\r\n        return currentUsersPosition.position;\r\n    }\r\n\r\n    hasPosition = (): boolean => {\r\n        let keyCurrentUserPosition = 'currentUserPosition_' + this._authService.userEmail();\r\n        var currentUsersPosition = JSON.parse(sessionStorage.getItem(keyCurrentUserPosition));\r\n        return currentUsersPosition != null && currentUsersPosition != undefined;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/services/PositionService.ts","export class UUIDService {\r\n\r\n    constructor() {\r\n        \r\n    }\r\n\r\n    static createUUID = (): string => {\r\n        var result, i, j;\r\n        result = '';\r\n        for (j = 0; j < 32; j++) {\r\n            if (j == 8 || j == 12 || j == 16 || j == 20)\r\n                result = result + '-';\r\n            i = Math.floor(Math.random() * 16).toString(16).toUpperCase();\r\n            result = result + i;\r\n        }\r\n        return result;\r\n    }\r\n    \r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/services/UUIDService.ts","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport * as _ from \"lodash\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport\r\n{\r\n    Button, \r\n    Modal\r\n} from \"react-bootstrap\";\r\n\r\n\r\nexport interface OkDialogProps {\r\n    headerText: string;\r\n    bodyText: string; \r\n    open: boolean;\r\n    okCallBack() : void;\r\n}\r\n\r\nexport interface OkDialogState {\r\n    showModal: boolean;\r\n}\r\n\r\n\r\nexport class OkDialog extends React.Component<OkDialogProps, OkDialogState> {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        //set initial state\r\n        this.state = {\r\n            showModal: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.open === true) {\r\n            this.setState({ showModal: true });\r\n        }\r\n    }\r\n\r\n    okClicked = () => {\r\n        this.setState({ showModal: false });\r\n        this.props.okCallBack();\r\n    }\r\n\r\n    close = () => {\r\n        this.setState({ showModal: false });\r\n        this.props.okCallBack();\r\n    }\r\n\r\n    open = () => {\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"leftFloat\">\r\n\r\n                <Modal show={this.state.showModal} onHide={this.close}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>{ this.props.headerText }</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <h4>{this.props.bodyText}</h4>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button\r\n                            type='button'\r\n                            bsSize='small'\r\n                            bsStyle='primary'\r\n                            onClick={this.okClicked}>Ok</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/OkDialog.tsx"],"sourceRoot":""}