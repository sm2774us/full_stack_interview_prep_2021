TODO

1. Maps

//https://github.com/tomchentw/react-google-maps/pull/501
//https://github.com/tomchentw/react-google-maps/issues/373




import * as React from "react";
import * as ReactDOM from "react-dom";
import * as _ from "lodash";

import 'bootstrap/dist/css/bootstrap.css';
import
{
    Well,
    Grid,
    Row,
    Col,
    ButtonInput,
    ButtonGroup,
    Button
} from "react-bootstrap";

import { withGoogleMap, GoogleMap, Marker, InfoWindow } from "react-google-maps";

const GetIcon = (marker) => {
    if (marker.key.startsWith("passenger")) {
        return '/assets/images/passenger.png';
    }
    else {
        return '/assets/images/driver.png';
    }

}


const ViewJobGoogleMap = withGoogleMap(props => (
    <GoogleMap
        ref={props.onMapLoad}
        defaultZoom={16}
        defaultCenter={{ lat: 50.8202949, lng: -0.1406958 }}
        onClick={props.onMapClick}>

        {props.markers.map(marker => (
            <Marker
                icon={ GetIcon(marker) }
                {...marker}
                onClick={() => props.onMarkerClick(marker) }>
                {marker.showInfo && (
                    <InfoWindow onCloseClick={() => props.onMarkerClose(marker) }>
                        <div>{marker.infoContent}</div>
                    </InfoWindow>
                ) }
            </Marker>
        )) }
    </GoogleMap>
));





//TODO : make this correct
//see https://tomchentw.github.io/react-google-maps/
//
//state = {
//    markers: [{
//      position: {
//        lat: 25.0112183,
//        lng: 121.52067570000001,
//      },
//      key: `Taiwan`,
//      defaultAnimation: 2,
//    }],
//  };

export interface ViewJobState {
    markers: any;
}

export class ViewJob extends React.Component<undefined, ViewJobState> {

    constructor(props: any) {
        super(props);
        this.state = {
            markers: [{
              position: {
                  lat: 50.8202949,
                  lng: -0.1406958,
              },
              key: `passenger`,
              defaultAnimation: 2,
              showInfo: false,
              infoContent: (
                  <svg
                      id="Layer_1"
                      xmlns="http://www.w3.org/2000/svg"
                      width="16"
                      height="16"
                      viewBox="0 0 16 16"
                      >
                      <path
                          d="M3.5 0c-1.7 0-3 1.6-3 3.5 0 1.7 1 3 2.3 3.4l-.5 8c0 .6.4 1 1 1h.5c.5 0 1-.4 1-1L4 7C5.5 6.4 6.5 5 6.5 3.4c0-2-1.3-3.5-3-3.5zm10 0l-.8 5h-.6l-.3-5h-.4L11 5H10l-.8-5H9v6.5c0 .3.2.5.5.5h1.3l-.5 8c0 .6.4 1 1 1h.4c.6 0 1-.4 1-1l-.5-8h1.3c.3 0 .5-.2.5-.5V0h-.4z"
                      />
                  </svg>
              ),
            }]
          };
    }


    render() {
        return (
            <Well className="outer-well">
                <Grid>
                    <Row className="show-grid">
                        <Col xs={10} md={6}>
                            <h4>CURRENT JOB</h4>
                        </Col>
                    </Row>
                    <Row className="show-grid">
                        <Col xs={10} md={6}>
                            <ViewJobGoogleMap
                                containerElement={
                                    <div style={{
                                        position: 'relative',
                                        top: 0,
                                        left: 0,
                                        right: 0,
                                        bottom: 0,
                                        width: 600,
                                        height: 600,
                                        justifyContent: 'flex-end',
                                        alignItems: 'center',
                                        marginTop: 20,
                                        marginLeft: 0,
                                        marginRight: 0,
                                        marginBottom: 20
                                    }} />
                                }
                                mapElement={
                                    <div style={{
                                        position: 'relative',
                                        top: 0,
                                        left: 0,
                                        right: 0,
                                        bottom: 0,
                                        width: 600,
                                        height: 600,
                                        marginTop: 20,
                                        marginLeft: 0,
                                        marginRight: 0,
                                        marginBottom: 20
                                    }} />
                                }
                                onMapLoad={this._handleMapLoad}
                                onMapClick={this._handleMapClick}
                                markers={this.state.markers}
                                onMarkerClick={this._handleMarkerClick}
                                onMarkerClose={this._handleMarkerClose}
                                />
                        </Col>
                    </Row>
                    <Row className="show-grid">
                        <span>
                            <Button
                                id="viewJobCompleteBtn"
                                type='button'
                                bsSize='small'
                                bsStyle='primary'
                                value='Register'>Complete Job</Button>
                            <Button
                                id="viewJobCancelBtn"
                                type='button'
                                bsSize='small'
                                bsStyle='primary'
                                value='Register'>Cancel Job</Button>
                        </span>
                    </Row>
                </Grid>
            </Well>
        );
    }



    _handleMarkerClose = (targetMarker) => {
        this.setState({
            markers: this.state.markers.map(marker => {
                if (marker === targetMarker) {
                    return {
                        ...marker,
                        showInfo: false,
                    };
                }
                return marker;
            }),
        });
    }

    _handleMarkerClick = (targetMarker) => {
        this.setState({
            markers: this.state.markers.map(marker => {
                if (marker === targetMarker) {
                    return {
                        ...marker,
                        showInfo: true,
                    };
                }
                return marker;
            }),
        });
    }


    _handleMapLoad = (map) => {
        if (map) {
            console.log(map.getZoom());
        }
    }

    _handleMapClick = (event) => {
        const nextMarkers = [
            ...this.state.markers,
            {
                position: event.latLng,
                defaultAnimation: 2,
                key: 'driver_' + Date.now().toString(),
                showInfo: false,
                infoContent: (
                    <svg
                        id="Layer_1"
                        xmlns="http://www.w3.org/2000/svg"
                        width="16"
                        height="16"
                        viewBox="0 0 16 16"
                        >
                        <path
                            d="M3.5 0c-1.7 0-3 1.6-3 3.5 0 1.7 1 3 2.3 3.4l-.5 8c0 .6.4 1 1 1h.5c.5 0 1-.4 1-1L4 7C5.5 6.4 6.5 5 6.5 3.4c0-2-1.3-3.5-3-3.5zm10 0l-.8 5h-.6l-.3-5h-.4L11 5H10l-.8-5H9v6.5c0 .3.2.5.5.5h1.3l-.5 8c0 .6.4 1 1 1h.4c.6 0 1-.4 1-1l-.5-8h1.3c.3 0 .5-.2.5-.5V0h-.4z"
                            />
                    </svg>
                )
            },
        ];
        this.setState({
            markers: nextMarkers,
        });
    }
}
