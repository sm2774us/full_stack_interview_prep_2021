#
# Time : O(1) for get and put operations
# Space: O(1)
#
# @tag : Stack and Queue
# @by  : Shaikat Majumdar
# @date: Aug 27, 2020
# **************************************************************************
# LeetCode - Problem - 146: LRU Cache
#
# Description:
#
# Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.
#
# Implement the LRUCache class:
#
# LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
# int get(int key) Return the value of the key if the key exists, otherwise return -1.
# void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.
# Follow up:
# Could you do get and put in O(1) time complexity?
#
#
#
# Example 1:
#
# Input
# ["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
# [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
# Output
# [null, null, null, 1, null, -1, null, -1, 3, 4]
#
# Explanation
# LRUCache lRUCache = new LRUCache(2);
# lRUCache.put(1, 1); // cache is {1=1}
# lRUCache.put(2, 2); // cache is {1=1, 2=2}
# lRUCache.get(1);    // return 1
# lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
# lRUCache.get(2);    // returns -1 (not found)
# lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
# lRUCache.get(1);    // return -1 (not found)
# lRUCache.get(3);    // return 3
# lRUCache.get(4);    // return 4
#
#
# Constraints:
#
#   * 1 <= capacity <= 3000
#   * 0 <= key <= 3000
#   * 0 <= value <= 104
#   * At most 3 * 104 calls will be made to get and put.
#
# **************************************************************************
# Source: https://leetcode.com/problems/lru-cache/ (Leetcode - Problem 146 - LRU Cache)
#         https://practice.geeksforgeeks.org/problems/lru-cache/1 (GeeksForGeeks - LRU Cache)
#
# Solution Explanation
# -----------------------------------
# * The most frequent operation of the problem is changing the node position in the list.
#   Change position of the node means two operations, delete and insert.
#   Double linked list data structure takes constant time O(1) to insert or delete nodes a linked list by repointing the previous and next pointer of the node.
#   Array data structure takes O(n) to insert or delete an element in the list by shifting all the element behind the position (backward for insertion, forward for deletion) by one.
#
# * put :
#   if the key is already in the cache, we update the value, remove the key node and insert the key node after the head;
#   if the key is not in cache, if the cache is not full,we insert the new key node after the head. If the cache is full, we delete the node before the tail to make room for the new key node, and insert the new key node after the head.
#
# * get:
#   return the value of the key.
#   remove the key node.
#   insert the key node after the head.

import unittest

class ListNode:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.prev = None
        self.next = None

class LRUCache:

    def __init__(self, capacity: int):
        self.dic = dict() # key to node
        self.capacity = capacity
        self.head = ListNode(0, 0)
        self.tail = ListNode(-1, -1)
        self.head.next = self.tail
        self.tail.prev = self.head

    def get(self, key: int) -> int:
        if key in self.dic:
            node = self.dic[key]
            self.removeFromList(node)
            self.insertIntoHead(node)
            return node.value
        else:
            return -1

    def put(self, key: int, value: int) -> None:
        if key in self.dic:             # similar to get()        
            node = self.dic[key]
            self.removeFromList(node)
            self.insertIntoHead(node)
            node.value = value         # replace the value len(dic)
        else: 
            if len(self.dic) >= self.capacity:
                self.removeFromTail()
            node = ListNode(key,value)
            self.dic[key] = node
            self.insertIntoHead(node)
			
    def removeFromList(self, node):
        node.prev.next = node.next
        node.next.prev = node.prev
    
    def insertIntoHead(self, node):
        headNext = self.head.next 
        self.head.next = node 
        node.prev = self.head 
        node.next = headNext 
        headNext.prev = node
    
    def removeFromTail(self):
        if len(self.dic) == 0: return
        tail_node = self.tail.prev
        del self.dic[tail_node.key]
        self.removeFromList(tail_node)


class Test(unittest.TestCase):
    def setUp(self) -> None:
        pass

    def tearDown(self) -> None:
        pass

    def test_lruCache(self) -> None:
        lruCache = LRUCache(2)

        lruCache.put(1, 1)
        # cache is {1 = 1}
        # self.assertEqual(1, lruCache.get(1))

        lruCache.put(2, 2)
        # cache is {1 = 1, 2 = 2}
        # self.assertEqual(1, lruCache.get(1))
        # self.assertEqual(2, lruCache.get(2))

        self.assertEqual(1, lruCache.get(1))
        lruCache.put(3, 3)
        # LRU key was 2, evicts key 2, cache is {1=1, 3=3}
        self.assertEqual(-1, lruCache.get(2))

        lruCache.put(4, 4)
        # LRU key was 1, evicts key 1, cache is {4=4, 3=3}
        self.assertEqual(-1, lruCache.get(1))

        self.assertEqual(3, lruCache.get(3))
        self.assertEqual(4, lruCache.get(4))


if __name__ == "__main__":
    unittest.main()